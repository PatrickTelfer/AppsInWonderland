{"version":3,"sources":["Components/Home/Home.js","Components/Lobby/PlayerList.js","Components/Common/Button.js","Components/Canvas/Canvas.js","Context/socket.js","Components/Lobby/Lobby.js","Components/PromptInput/PromptInput.js","Components/DrawingScreen/DrawingScreen.js","Components/Voting/VotingCard.js","Components/Voting/Voting.js","Components/Results/Rankings.js","Components/Results/Results.js","Components/RoundResults/RoundResults.js","theme.js","App.js","reportWebVitals.js","index.js"],"names":["handleCreateClick","name","setError","a","fetch","method","headers","body","JSON","stringify","res","json","handleJoinClick","code","status","Home","socket","useState","setCode","error","setName","history","useHistory","p","m","minH","shadow","flexDirection","textAlign","mt","isRequired","w","focusBorderColor","placeholder","variant","onChange","event","target","value","isInvalid","colorScheme","onClick","lobbyData","console","log","isHost","push","pathname","state","PlayerList","props","players","bgColor","map","index","styled","button","Canvas","forwardRef","ref","Error","canvasRef","containerRef","useRef","ctx","setCtx","currentX","setCurrentX","currentY","setCurrentY","isDrawing","setIsDrawing","isDrawingToolSelected","setIsDrawingToolSelected","currentColor","setCurrentColor","useEffect","current","getContext","canvas","width","height","drawLine","x","y","color","strokeStyle","lineWidth","beginPath","moveTo","lineTo","closePath","stroke","alignItems","bg","borderRadius","justifyContent","mb","disabled","aria-label","icon","clearRect","style","backgroundColor","touchAction","boxShadow","onTouchStart","e","coords","convert","onTouchEnd","onTouchMove","onMouseDown","nativeEvent","offsetX","offsetY","onMouseUp","onMouseMove","onMouseLeave","changedTouches","pageX","offsetLeft","pageY","offsetTop","div","socketio","connect","SocketContext","React","createContext","withRouter","setPlayers","joined","setJoined","lobbyDuration","setLobbyDuration","location","serverCode","useContext","getData","isMounted","emit","on","replace","removeAllListeners","flexWrap","flexGrow","minW","fontSize","length","marginTop","defaultValue","min","max","step","val","focusThumbOnChange","position","right","boxSize","startData","second","setSecond","submitted","setSubmitted","prompt","setPrompt","maxSecond","setMaxSecond","receivedTimer","setReceivedTimer","id","useParams","secondData","isSubmitted","setIsSubmitted","dataURL","toDataURL","imageData","size","TileCard","children","VotingButton","padding","VotingCard","src","showBest","setShowBest","showWeird","setShowWeird","showCreative","setShowCreative","showName","isBest","isCreative","isWeird","alt","margin","spacing","category","images","setImages","requestedImages","setRequestedImages","imgs","isLast","Rankings","title","data","flex","display","mySort","b","Results","bestArray","setBestArray","creativeArray","setCreativeArray","weirdArray","setWeirdArray","playerData","setPlayerData","votes","arr1","best","arr2","creative","arr3","weird","sort","setTopPlayers","sortedPlayers","topCount","i","serverPlayers","setServerPlayers","buttonText","setButtonText","roundVotes","img","currentDrawing","newArr","j","mergeArrs","player","theme","extendTheme","config","initialColorMode","useSystemColorMode","App","Provider","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAcMA,EAAiB,uCAAG,WAAOC,EAAMC,GAAb,iBAAAC,EAAA,sEACNC,MAAM,aAAc,CACpCC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAER,KAAMA,MANP,cAClBS,EADkB,OAQxBR,EAAS,MARe,SASLQ,EAAIC,OATC,cASlBA,EATkB,yBAWjBA,GAXiB,2CAAH,wDAcjBC,EAAe,uCAAG,WAAOC,EAAMX,GAAb,iBAAAC,EAAA,sEACJC,MAAM,cAAgBS,GADlB,UAEH,OADbH,EADgB,QAEdI,QAAiC,MAAfJ,EAAII,OAFR,uBAGpBZ,EAAS,4BAHW,kBAKb,MALa,wBAODQ,EAAIC,OAPH,eAOdA,EAPc,OAQpBT,EAAS,IARW,kBASbS,GATa,4CAAH,wDAiGNI,EApFF,SAAC,GAAe,EAAbC,OAAc,IAC5B,EAAwBC,mBAAS,IAAjC,mBAAOJ,EAAP,KAAaK,EAAb,KACA,EAA0BD,mBAAS,MAAnC,mBAAOE,EAAP,KAAcjB,EAAd,KACA,EAAwBe,mBAAS,MAAjC,mBAAOhB,EAAP,KAAamB,EAAb,KACMC,EAAUC,cAChB,OACE,eAAC,IAAD,CAAMC,EAAE,IAAIC,EAAE,IAAIC,KAAK,KAAKC,OAAO,KAAKC,cAAc,SAAtD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAASC,UAAU,SAAnB,kCAEF,cAAC,IAAD,CAAQC,GAAI,EAAZ,SACE,eAAC,IAAD,CAAaC,YAAU,EAACC,EAAE,KAA1B,UACE,cAAC,IAAD,mBACA,cAAC,IAAD,CACEC,iBAAiB,aACjBC,YAAY,aACZC,QAAQ,UACRC,SAAU,SAACC,GACThB,EAAQgB,EAAMC,OAAOC,eAK5BrC,GACC,qCACE,cAAC,IAAD,CAAQ4B,GAAI,EAAZ,SACE,eAAC,IAAD,CAAaC,YAAU,EAACC,EAAE,KAAKQ,UAAqB,OAAVpB,EAA1C,UACE,cAAC,IAAD,mBACA,cAAC,IAAD,CACEa,iBAAiB,aACjBC,YAAY,iCACZC,QAAQ,UACRC,SAAU,SAACC,GACTlB,EAAQkB,EAAMC,OAAOC,UAGzB,cAAC,IAAD,UAAmBnB,SAGvB,cAAC,IAAD,CAAQU,GAAI,EAAZ,SACE,cAAC,IAAD,CACEE,EAAE,KACFG,QAAQ,UACRM,YAAY,SACZC,QAAO,sBAAE,4BAAAtC,EAAA,sEACiBS,EAAgBC,EAAMX,GADvC,OACDwC,EADC,OAEPC,QAAQC,IAAIF,GACM,OAAdA,IACFA,EAAUG,QAAS,EACnBxB,EAAQyB,KAAK,CACXC,SAAU,SAAWL,EAAU7B,KAC/BmC,MAAM,2BAAMN,GAAP,IAAkBzC,YAPpB,2CAJX,yBAmBF,cAAC,IAAD,CAAQ4B,GAAI,EAAZ,SACE,cAAC,IAAD,CACEE,EAAE,KACFG,QAAQ,UACRM,YAAY,SACZC,QAAO,sBAAE,4BAAAtC,EAAA,sEACiBH,EAAkBC,EAAMC,GADzC,OACDwC,EADC,OAEFvB,IACHuB,EAAUG,QAAS,EACnBxB,EAAQyB,KAAK,CACXC,SAAU,SAAWL,EAAU7B,KAC/BmC,MAAM,2BAAMN,GAAP,IAAkBzC,YANpB,2CAJX,kC,SCtFGgD,EAZI,SAACC,GAClB,IAAMC,EAAUD,EAAMC,QACtB,OACE,cAAC,IAAD,CAAMC,QAAQ,WAAW3B,KAAK,MAAMM,EAAE,KAAKF,GAAI,EAAGN,EAAG,EAAGG,OAAO,KAA/D,SACGyB,GACCA,EAAQE,KAAI,SAACf,EAAOgB,GAClB,OAAO,cAAC,IAAD,UAAuBhB,EAAMrC,MAAdqD,S,2BCPVC,IAAOC,OAAV,usB,QCIbC,EAASC,sBAAW,SAACR,EAAOS,GAChC,IAAKA,EACH,MAAM,IAAIC,MAAM,kCAGlB,IAAIC,EAAYF,EAEVG,EAAeC,iBAAO,MAC5B,EAAsB9C,mBAAS,MAA/B,mBAAO+C,EAAP,KAAYC,EAAZ,KACA,EAAgChD,mBAAS,GAAzC,mBAAOiD,EAAP,KAAiBC,EAAjB,KACA,EAAgClD,mBAAS,GAAzC,mBAAOmD,EAAP,KAAiBC,EAAjB,KACA,EAAkCpD,oBAAS,GAA3C,mBAAOqD,EAAP,KAAkBC,EAAlB,KACA,EAA0DtD,oBAAS,GAAnE,mBAAOuD,EAAP,KAA8BC,EAA9B,KACA,EAAwCxD,qBAAxC,mBAAOyD,EAAP,KAAqBC,EAArB,KAEAC,qBAAU,WACR,IACIZ,EADWH,EAAUgB,QACRC,WAAW,MAC5Bb,EAAOD,GACPA,EAAIe,OAAOC,MAAQ,IACnBhB,EAAIe,OAAOE,OAAS,IACpBN,EAAgB,aACf,CAACX,IAEJ,IAAMkB,EAAW,SAAUC,EAAGC,EAAGC,GAC/BrB,EAAIsB,YAAcZ,EAClBV,EAAIuB,UAAY,EACXf,IACHR,EAAIsB,YAAc,UAClBtB,EAAIuB,UAAY,IAElBvB,EAAIwB,YACJxB,EAAIyB,OAAOvB,EAAUE,GACrBJ,EAAI0B,OAAOP,EAAGC,GACdpB,EAAI2B,YACJ3B,EAAI4B,UAMN,OACE,eAAC,IAAD,CAAMjC,IAAKG,EAAcvC,EAAE,IAAII,cAAc,SAASkE,WAAW,SAAjE,UACE,eAAC,IAAD,CACEC,GAAG,aACHvE,EAAE,IACFwE,aAAa,KACbC,eAAe,eACfhB,MAAM,MACNiB,GAAI,EANN,UAQE,cAAC,IAAD,CACEzD,YAAY,SACZ0D,UAAW1B,EACX2B,aAAW,SACXC,KAAM,cAAC,IAAD,IACN3D,QAAS,WACPgC,GAA0BD,MAG9B,cAAC,IAAD,CACEhC,YAAY,SACZ2D,aAAW,OACXD,SAAU1B,EACV4B,KAAM,cAAC,IAAD,IACN3D,QAAS,WACPgC,GAA0BD,MAG9B,cAAC,IAAD,CACEhC,YAAY,SACZ2D,aAAW,QACXC,KAAM,cAAC,IAAD,IACN3D,QAnCY,WAClBuB,EAAIqC,UAAU,EAAG,EAAGrC,EAAIe,OAAOC,MAAOhB,EAAIe,OAAOE,cAqC/C,wBACEqB,MAAO,CACLC,gBAAiB,UACjBC,YAAa,OACbC,UAAW,oCAEb9C,IAAKE,EACL6C,aAAc,SAACC,GACb,IAAIC,EAASC,EAAQF,EAAG3C,EAAIe,QAC5BZ,EAAYyC,EAAOzB,GACnBd,EAAYuC,EAAOxB,GACnBb,GAAa,IAEfuC,WAAY,SAACH,GACX,GAAKrC,EAAL,CAGA,IAAIsC,EAASC,EAAQF,EAAG3C,EAAIe,QAC5BG,EAAS0B,EAAOzB,EAAGyB,EAAOxB,GAC1Bb,GAAa,KAEfwC,YAAa,SAACJ,GACZ,GAAKrC,EAAL,CAGA,IAAIsC,EAASC,EAAQF,EAAG3C,EAAIe,QAC5BG,EAAS0B,EAAOzB,EAAGyB,EAAOxB,GAC1BjB,EAAYyC,EAAOzB,GACnBd,EAAYuC,EAAOxB,KAErB4B,YAAa,SAACL,GACZpC,GAAa,GACbJ,EAAYwC,EAAEM,YAAYC,SAC1B7C,EAAYsC,EAAEM,YAAYE,UAE5BC,UAAW,SAACT,GACLrC,IAGLY,EAASyB,EAAEM,YAAYC,QAASP,EAAEM,YAAYE,SAC9C5C,GAAa,KAEf8C,YAAa,SAACV,GACPrC,IAGLY,EAASyB,EAAEM,YAAYC,QAASP,EAAEM,YAAYE,SAC9ChD,EAAYwC,EAAEM,YAAYC,SAC1B7C,EAAYsC,EAAEM,YAAYE,WAE5BG,aAAc,SAACX,GACbpC,GAAa,YAOjBsC,EAAU,SAACF,EAAG5B,GAClB,MAAO,CACLI,EAAGwB,EAAEY,eAAe,GAAGC,MAAQzC,EAAO0C,WACtCrC,EAAGuB,EAAEY,eAAe,GAAGG,MAAQ3C,EAAO4C,YAuB3BlE,GAnBSF,IAAOqE,IAAV,2OAaArE,IAAOwB,OAAV,kIAMHtB,G,SCnKFzC,E,OAAS6G,EAASC,QAC7B,2CAEWC,EAAgBC,IAAMC,gB,oCCqJpBC,eAvID,SAAChF,GACb,MAA8BjC,mBAAS,IAAvC,mBAAOkC,EAAP,KAAgBgF,EAAhB,KACA,EAA4BlH,oBAAS,GAArC,mBAAOmH,EAAP,KAAeC,EAAf,KACA,EAA0CpH,mBAAS,IAAnD,mBAAOqH,EAAP,KAAsBC,EAAtB,KAEMvF,EAAQE,EAAMsF,SAASxF,MACvByF,EAAazF,EAAMnC,KACnBZ,EAAO+C,EAAM/C,KACb4C,EAASG,EAAMH,OACf7B,EAAS0H,qBAAWX,GACpB1G,EAAUC,cACVuC,EAAYE,mBAElBa,qBAAU,YACK,uCAAG,8BAAAzE,EAAA,sEACIC,MAAM,cAAgBqI,GAD1B,cACR/H,EADQ,gBAEKA,EAAIC,OAFT,OAERA,EAFQ,OAGdwH,EAAWxH,EAAKwC,SAHF,2CAAH,qDAKbwF,KACC,CAACF,IAEJ7D,qBAAU,WACR,IAAIgE,GAAY,EAoBhB,OAnBI5H,IAAWoH,IACTQ,IACF5H,EAAO6H,KAAK,OAAQ,CAAEJ,aAAYxI,SAClCoI,GAAU,IAEZrH,EAAO8H,GAAG,gBAAgB,SAAC3F,GACrByF,GACFT,EAAWhF,MAIfnC,EAAO8H,GAAG,mBAAmB,WAC3BF,GAAY,EACZvH,EAAQ0H,QAAQ,CACdhG,SAAU,WAAa0F,EACvBzF,MAAM,2BAAMA,GAAP,IAAc/C,eAIlB,WACL2I,GAAY,EACZ5H,EAAOgI,mBAAmB,gBAC1BhI,EAAOgI,mBAAmB,sBAE3B,CAAChI,EAAQoH,EAAQnI,EAAMwI,EAAYpH,EAAS2B,IAW/C,OACE,eAAC,IAAD,CAAMiG,SAAS,OAAf,UACE,eAAC,IAAD,CACEC,SAAS,IACT3H,EAAE,IACFC,EAAE,IACFC,KAAK,KACLC,OAAO,KACPC,cAAc,SACdwH,KAAK,KACLtD,WAAW,SARb,UAUE,cAAC,IAAD,CAASjE,UAAU,SAAnB,kCACA,eAAC,IAAD,CAAMwH,SAAS,KAAf,yCACoB,cAAC,IAAD,CAAM5G,YAAY,MAAlB,SAAyBiG,IAD7C,mBAGA,cAAC,EAAD,CAAYtF,QAASA,IACrB,eAAC,IAAD,CAAMtB,GAAI,EAAGuH,SAAS,KAAtB,2BACiBjG,GAAWA,EAAQkG,UAEnCxG,GACC,cAAC,IAAD,CAAMlB,cAAc,SAASkE,WAAW,SAASyD,UAAU,OAA3D,SACE,eAAC,IAAD,WACE,cAAC,IAAD,iCACA,eAAC,IAAD,CACEC,aAAcjB,EACdkB,IAAK,EACLC,IAAK,IACLC,KAAM,EACNvH,SAAU,SAACwH,GACTpB,EAAiBoB,IAEnBC,oBAAoB,EARtB,UAUE,eAAC,IAAD,CAAa9D,GAAG,aAAhB,UACE,cAAC,IAAD,CAAK+D,SAAS,WAAWC,MAAO,KAChC,cAAC,IAAD,CAAmBhE,GAAG,kBAExB,cAAC,IAAD,CAAaiE,QAAS,OAExB,cAAC,IAAD,UACE,eAAC,IAAD,WAAOzB,EAAP,qBAKPzF,GACC,cAAC,IAAD,CACEX,QAAQ,UACRM,YAAY,SACZX,GAAI,GACJE,EAAE,MACFU,QA7DQ,WAChB,GAAIzB,EAAQ,CACV,IAAMgJ,EAAY,CAChB1B,iBAEFtH,EAAO6H,KAAK,QAASmB,KAmDjB,sBAWJ,eAAC,IAAD,CACEd,SAAS,IACT3H,EAAE,IACFC,EAAE,IACFC,KAAK,KACLC,OAAO,KACPC,cAAc,SACdwH,KAAK,KAPP,UASE,cAAC,IAAD,UACE,cAAC,IAAD,CAAMC,SAAS,KAAf,qCAEF,cAAC,EAAD,CAAQzF,IAAKE,a,kBC3BNqE,eAxGK,SAAChF,GACnB,IAAMF,EAAQE,EAAMsF,SAASxF,MAEvB/C,EAAO+C,EAAM/C,KACbe,EAAS0H,qBAAWX,GAC1B,EAA4B9G,mBAAS,IAArC,mBAAOgJ,EAAP,KAAeC,EAAf,KACA,EAAkCjJ,oBAAS,GAA3C,mBAAOkJ,EAAP,KAAkBC,EAAlB,KACA,EAA4BnJ,mBAAS,IAArC,mBAAOoJ,EAAP,KAAeC,EAAf,KACA,EAAkCrJ,mBAAS,IAA3C,mBAAOsJ,EAAP,KAAkBC,EAAlB,KACMnJ,EAAUC,cAChB,EAA0CL,oBAAS,GAAnD,mBAAOwJ,EAAP,KAAsBC,EAAtB,KACQC,EAAOC,cAAPD,GAkCR,OAhCA/F,qBAAU,WACR,IAAIgE,GAAY,EAwBhB,OAvBI5H,IACFA,EAAO8H,GAAG,oBAAoB,SAAC+B,GAC7B,GAAIjC,EAAW,CACb,IAAQqB,EAAsBY,EAAtBZ,OAAQM,EAAcM,EAAdN,UAChBL,EAAUD,GACVO,EAAaD,GACRE,GACHC,GAAiB,OAIvB1J,EAAO8H,GAAG,kBAAkB,WACtBF,IACGuB,GAAwB,KAAXE,GAChBrJ,EAAO6H,KAAK,eAAgBwB,GAE9BhJ,EAAQ0H,QAAQ,CACdhG,SAAU,kBAAoB4H,EAC9B3H,MAAM,2BAAMA,GAAP,IAAc/C,gBAKpB,WACL2I,GAAY,EACZ5H,EAAOgI,mBAAmB,kBAC1BhI,EAAOgI,mBAAmB,uBAG3B,CAAC3H,EAASL,EAAQmJ,EAAWE,IAE9B,eAAC,IAAD,CAAM9I,EAAE,IAAIC,EAAE,IAAIC,KAAK,KAAKC,OAAO,KAAKC,cAAc,SAAtD,UACE,cAAC,IAAD,CAASC,UAAU,SAAnB,oCACA,cAAC,IAAD,CAAMA,UAAU,SAASwH,SAAS,KAAKvH,GAAI,EAA3C,6FAKC4I,GACC,cAAC,IAAD,UACE,cAAC,IAAD,CAAkBnI,MAAO2H,EAAQR,IAAKc,EAAW1I,GAAI,EAArD,SACE,cAAC,IAAD,UAAwBoI,SAI5BE,GACA,qCACE,cAAC,IAAD,CAAQtI,GAAI,EAAZ,SACE,eAAC,IAAD,CAAaC,YAAU,EAACC,EAAE,KAA1B,UACE,cAAC,IAAD,qBACA,cAAC,IAAD,CACEC,iBAAiB,aACjBC,YAAY,sBACZC,QAAQ,UACRC,SAAU,SAACwE,GACT2D,EAAU3D,EAAEtE,OAAOC,eAK3B,cAAC,IAAD,CAAQT,GAAI,EAAZ,SACE,cAAC,IAAD,CACEE,EAAE,KACFG,QAAQ,UACRM,YAAY,SACZC,QAAS,WACQ,KAAX4H,IACFD,GAAa,GACbpJ,EAAO6H,KAAK,eAAgBwB,KAPlC,yBAgBLF,GACC,cAAC,IAAD,CAAQtI,GAAG,OAAX,SACE,eAAC,IAAD,CAAOf,OAAO,UAAd,UACE,cAAC,IAAD,IADF,0ECkCKoH,eAlIO,SAAChF,GACrB,IAAMlC,EAAS0H,qBAAWX,GACpBlE,EAAYE,mBACZ1C,EAAUC,cACRqJ,EAAOC,cAAPD,GAER,EAA4B1J,mBAAS,IAArC,mBAAOoJ,EAAP,KAAeC,EAAf,KACA,EAA4BrJ,mBAAS,IAArC,mBAAOgJ,EAAP,KAAeC,EAAf,KACA,EAAsCjJ,oBAAS,GAA/C,mBAAO6J,EAAP,KAAoBC,EAApB,KACA,EAA0C9J,oBAAS,GAAnD,mBAAOwJ,EAAP,KAAsBC,EAAtB,KACA,EAAkCzJ,mBAAS,IAA3C,mBAAOsJ,EAAP,KAAkBC,EAAlB,KAEMxH,EAAQE,EAAMsF,SAASxF,MACvB/C,EAAO+C,GAASA,EAAM/C,KAmE5B,OAjEA2E,qBAAU,WACJ5D,IACFA,EAAO6H,KAAK,oBACZ7H,EAAO6H,KAAK,iBAEb,CAAC7H,IAEJ4D,qBAAU,WACR,IAAIgE,GAAY,EA8BhB,OA7BI5H,GAAU4H,IACZ5H,EAAO8H,GAAG,eAAe,SAAC+B,GACxB,IAAQZ,EAAsBY,EAAtBZ,OAAQM,EAAcM,EAAdN,UACZ3B,IACFsB,EAAUD,GACVO,EAAaD,IAEVE,GACHC,GAAiB,MAGrB1J,EAAO8H,GAAG,aAAa,WACrB,GAAIF,EAAW,CACb,IAAKkC,EAAa,CAChB,IAAME,EAAUnH,EAAUgB,QAAQoG,YAC5BC,EAAY,CAChBjL,OACA+K,WAEFhK,EAAO6H,KAAK,kBAAmBqC,GAGjC7J,EAAQ0H,QAAQ,CACdhG,SAAU,WAAa4H,EACvB3H,MAAM,2BAAMA,GAAP,IAAc/C,OAAMoK,kBAK1B,WACLzB,GAAY,EACZ5H,EAAOgI,mBAAmB,aAC1BhI,EAAOgI,mBAAmB,kBAE3B,CAAChI,EAAQ8J,EAAaL,IAEzB7F,qBAAU,WACR,IAAIgE,GAAY,EAahB,OAZI5H,GAAU4H,IACZ5H,EAAO8H,GAAG,iBAAiB,SAACuB,GACtBzB,GACF0B,EAAUD,MAGdrJ,EAAO8H,GAAG,YAAY,WAChBF,GACFvH,EAAQ0H,QAAQ,SAIf,WACLH,GAAY,EACZ5H,EAAOgI,mBAAmB,iBAC1BhI,EAAOgI,mBAAmB,eAE3B,CAAC3H,EAASL,EAAQ8J,IAEnB,eAAC,IAAD,CACEvJ,EAAE,IACFC,EAAE,IACFC,KAAK,KACLC,OAAO,KACPC,cAAc,SACdkE,WAAW,SANb,UAQE,cAAC,IAAD,CAASsF,KAAK,KAAd,4BACA,cAAC,IAAD,UACE,cAAC,IAAD,UAAOd,GAAU,iCAGnB,cAAC,IAAD,CAAkB/H,MAAO2H,EAAQR,IAAKc,EAAW1I,GAAI,EAArD,SACG4I,GACC,cAAC,IAAD,UAAwBR,OAG1Ba,GACA,qCACE,cAAC,EAAD,CAAQnH,IAAKE,IACb,cAAC,IAAD,CACE9B,EAAE,MACFG,QAAQ,UACRM,YAAY,SACZC,QAAS,WACPsI,GAAe,GACf,IAAMC,EAAUnH,EAAUgB,QAAQoG,YAC5BC,EAAY,CAChBjL,OACA+K,WAEFhK,EAAO6H,KAAK,kBAAmBqC,IAXnC,uBAkBHJ,GACC,eAAC,IAAD,CAAOhK,OAAO,UAAUe,GAAG,OAA3B,UACE,cAAC,IAAD,IADF,wE,kBCrIFuJ,EAAW,SAAClI,GAChB,IAAQE,EAAYF,EAAZE,QACR,OACE,cAAC,IAAD,CAAK2C,aAAa,KAAKE,GAAG,IAAI1E,EAAE,IAAIK,UAAU,SAASwB,QAASA,EAAhE,SACGF,EAAMmI,YAKPC,EAAe,SAACpI,GACpB,IAAQE,EAAqBF,EAArBE,QAASX,EAAYS,EAAZT,QACjB,OACE,cAAC,IAAD,CACEV,EAAE,MACFqB,QAASA,EACT2C,aAAa,KACbwF,QAAQ,IACR9I,QAASA,EALX,SAOGS,EAAMmI,YAyFEG,EApFI,SAAC,GAab,IAZLC,EAYI,EAZJA,IACAxL,EAWI,EAXJA,KACAyL,EAUI,EAVJA,SACAC,EASI,EATJA,YACAC,EAQI,EARJA,UACAC,EAOI,EAPJA,aACAC,EAMI,EANJA,aACAC,EAKI,EALJA,gBACAC,EAII,EAJJA,SACAC,EAGI,EAHJA,OACAC,EAEI,EAFJA,WACAC,EACI,EADJA,QAEMnL,EAAS0H,qBAAWX,GAE1B,OACE,eAAC,IAAD,CAAMpG,cAAc,SAASI,EAAE,QAAQP,EAAG,EAA1C,UACE,eAAC,IAAD,CACEG,cAAc,SACdkE,WAAW,SACXG,eAAe,SACfO,gBAAgB,UAChBN,GAAI,EALN,UAOE,cAAC,IAAD,CAAOmG,IAAI,eAAeX,IAAKA,IAC/B,eAAC,IAAD,CAAKY,OAAO,IAAZ,UACGJ,GAAU,cAAC,EAAD,CAAU7I,QAAQ,UAAlB,oDACV8I,GACC,cAAC,EAAD,CAAU9I,QAAQ,UAAlB,qDAED+I,GAAW,cAAC,EAAD,CAAU/I,QAAQ,UAAlB,8CAGb4I,GACC,eAAC,IAAD,CAAKnK,GAAG,OAAOuB,QAAQ,QAAQ7B,EAAE,IAAI0E,GAAG,IAAIF,aAAa,KAAzD,wBACc9F,QAIlB,eAAC,IAAD,CAAQqM,QAAS,EAAjB,UACGZ,GACC,cAAC,EAAD,CACEtI,QAAQ,UACRX,QAAS,WACPkJ,GAAY,GACZ3K,EAAO6H,KAAK,gBAAiB,CAAE5I,KAAMA,EAAMsM,SAAU,UAJzD,oDAWDT,GACC,cAAC,EAAD,CACE1I,QAAQ,UACRX,QAAS,WACPsJ,GAAgB,GAChB/K,EAAO6H,KAAK,gBAAiB,CAC3B5I,KAAMA,EACNsM,SAAU,cANhB,qDAcDX,GACC,cAAC,EAAD,CACExI,QAAQ,UACRX,QAAS,WACPoJ,GAAa,GACb7K,EAAO6H,KAAK,gBAAiB,CAAE5I,KAAMA,EAAMsM,SAAU,WAJzD,kDCCKrE,gBA3FA,SAAChF,GACd,IAAMlC,EAAS0H,qBAAWX,GAC1B,EAA4B9G,mBAAS,IAArC,mBAAOuL,EAAP,KAAeC,EAAf,KACMpL,EAAUC,cACRqJ,EAAOC,cAAPD,GAER,EAA8C1J,oBAAS,GAAvD,mBAAOyL,EAAP,KAAwBC,EAAxB,KACA,EAAgC1L,oBAAS,GAAzC,mBAAOyK,EAAP,KAAiBC,EAAjB,KACA,EAAwC1K,oBAAS,GAAjD,mBAAO6K,EAAP,KAAqBC,EAArB,KACA,EAAkC9K,oBAAS,GAA3C,mBAAO2K,EAAP,KAAkBC,EAAlB,KAEM7I,EAAQE,EAAMsF,SAASxF,MACvB/C,EAAO+C,GAASA,EAAM/C,KACtBoK,EAASrH,GAASA,EAAMqH,OA2C9B,OAzCAzF,qBAAU,WACR,IAAIgE,GAAY,EAgChB,OA/BI5H,IAAW0L,GAAmB9D,IAChC5H,EAAO6H,KAAK,oBACRD,GACF+D,GAAmB,GAGrB3L,EAAO8H,GAAG,iBAAiB,SAAC8D,GACtBhE,GACF6D,EAAUG,MAId5L,EAAO8H,GAAG,gBAAgB,WACpBF,GACFvH,EAAQ0H,QAAQ,CACdhG,SAAU,iBAAmB4H,EAC7B3H,MAAM,2BAAMA,GAAP,IAAc/C,OAAM4M,QAAQ,EAAOxC,gBAK9CrJ,EAAO8H,GAAG,eAAe,WACnBF,GACFvH,EAAQ0H,QAAQ,CACdhG,SAAU,iBAAmB4H,EAC7B3H,MAAM,2BAAMA,GAAP,IAAc/C,OAAM4M,QAAQ,EAAMxC,iBAMxC,WACLzB,GAAY,EACZ5H,EAAOgI,mBAAmB,iBAC1BhI,EAAOgI,mBAAmB,gBAC1BhI,EAAOgI,mBAAmB,kBAE3B,IAGD,eAAC,IAAD,CACEzH,EAAE,IACFC,EAAE,IACFC,KAAK,KACLC,OAAO,KACPC,cAAc,SACdkE,WAAW,SANb,UAQE,cAAC,IAAD,oBACA,eAAC,IAAD,6BACiB,cAAC,IAAD,UAAOwE,OAExB,cAAC,IAAD,CAAMrE,eAAe,SAASiD,SAAS,OAAOoD,OAAO,IAArD,SACGG,EAAOnJ,KAAI,SAACf,EAAOgB,GAClB,OACE,cAAC,EAAD,CAEEmI,IAAKnJ,EAAM0I,QACX/K,KAAMqC,EAAMrC,KACZyL,SAAUA,EACVC,YAAaA,EACbG,aAAcA,EACdC,gBAAiBA,EACjBH,UAAWA,EACXC,aAAcA,EACdG,UAAU,GATL1I,cC7CJwJ,GAhCE,SAAC5J,GAChB,IAAQ6J,EAAuB7J,EAAvB6J,MAAOC,EAAgB9J,EAAhB8J,KAAM3H,EAAUnC,EAAVmC,MACrB,OACE,eAAC,IAAD,CACE8D,KAAK,KACLxH,cAAc,SACdsL,KAAK,IACLpH,WAAW,SACXhE,GAAI,EACJoE,GAAI,EANN,UAQE,cAAC,IAAD,CAAM7C,QAASiC,EAAO9D,EAAE,IAAIwE,aAAa,KAAKE,GAAI,EAAGlE,EAAE,MAAvD,SACGgL,IAEH,cAAC,IAAD,UACGC,EAAK3J,KAAI,SAACf,EAAOgB,GAChB,OACE,eAAC,IAAD,WACa,IAAVA,GAAe,iBACfhB,EAAMrC,KAAM,IACb,eAAC,IAAD,CAAMiN,QAAQ,SAAS7H,MAAM,MAA7B,UACG,IADH,IAEI/C,EAAMA,MAFV,eAHagB,YCf3B,SAAS6J,GAAOhN,EAAGiN,GACjB,OAAIjN,EAAEmC,MAAQ8K,EAAE9K,OACN,EAED,EAGX,IA4Ee+K,GA5EC,WACd,MAAkCpM,mBAAS,IAA3C,mBAAOqM,EAAP,KAAkBC,EAAlB,KACA,EAA0CtM,mBAAS,IAAnD,mBAAOuM,EAAP,KAAsBC,EAAtB,KACA,EAAoCxM,mBAAS,IAA7C,mBAAOyM,EAAP,KAAmBC,EAAnB,KACA,EAAoC1M,mBAAS,IAA7C,mBAAO2M,EAAP,KAAmBC,EAAnB,KAEM7M,EAAS0H,qBAAWX,GAkD1B,OAhDAnD,qBAAU,WACR,IAAIgE,GAAY,EAYhB,OAVI5H,GAAU4H,IACZ5H,EAAO6H,KAAK,mBAEZ7H,EAAO8H,GAAG,gBAAgB,SAACgF,GACrBlF,GACFiF,EAAcC,OAKb,WACLlF,GAAY,KAEb,CAAC5H,IAEJ4D,qBAAU,WACR,IAAMmJ,EAAOH,EAAWvK,KAAI,SAAC2J,GAC3B,MAAO,CACL/M,KAAM+M,EAAK/M,KACXqC,MAAO0K,EAAKc,MAAME,SAIhBC,EAAOL,EAAWvK,KAAI,SAAC2J,GAC3B,MAAO,CACL/M,KAAM+M,EAAK/M,KACXqC,MAAO0K,EAAKc,MAAMI,aAIhBC,EAAOP,EAAWvK,KAAI,SAAC2J,GAC3B,MAAO,CACL/M,KAAM+M,EAAK/M,KACXqC,MAAO0K,EAAKc,MAAMM,UAGtBL,EAAKM,KAAKlB,IACVI,EAAaQ,GAEbE,EAAKI,KAAKlB,IACVM,EAAiBQ,GAEjBE,EAAKE,KAAKlB,IACVQ,EAAcQ,KACb,CAACP,IAEF,eAAC,IAAD,CACErM,EAAE,IACFC,EAAE,IACFC,KAAK,KACLC,OAAO,KACPE,UAAU,SACVD,cAAc,SANhB,UAQE,cAAC,IAAD,CAASsE,GAAI,EAAb,4BAEA,eAAC,IAAD,CAAMrE,UAAU,SAASqH,SAAS,OAAlC,UACE,cAAC,GAAD,CAAU8D,MAAM,eAAe1H,MAAM,UAAU2H,KAAMM,IACrD,cAAC,GAAD,CAAUP,MAAM,gBAAgB1H,MAAM,UAAU2H,KAAMQ,IACtD,cAAC,GAAD,CAAUT,MAAM,eAAe1H,MAAM,UAAU2H,KAAMU,WC5E7D,SAASP,GAAOhN,EAAGiN,GACjB,OAAIjN,EAAEmC,MAAQ8K,EAAE9K,OACN,EAED,EAIX,SAASgM,GAAcC,EAAehC,GAGpC,IAFA,IAAMiC,EAAWD,EAAc,GAAGjM,MAEzBmM,EAAI,EAAGA,EAAIF,EAAclF,OAAQoF,IACpCF,EAAcE,GAAGnM,QAAUkM,EAC7BD,EAAcE,GAAGlC,IAAY,EAE7BgC,EAAcE,GAAGlC,IAAY,EAgCnC,IA6IerE,gBA7IM,SAAChF,GACpB,MAA8BjC,mBAAS,IAAvC,mBAAOkC,EAAP,KAAgBgF,EAAhB,KACA,EAA0ClH,mBAAS,IAAnD,mBAAOyN,EAAP,KAAsBC,EAAtB,KACA,EAAoC1N,mBAAS,cAA7C,mBAAO2N,EAAP,KAAmBC,EAAnB,KAEMxN,EAAUC,cACRqJ,EAAOC,cAAPD,GAEF3J,EAAS0H,qBAAWX,GACpB/E,EAAQE,EAAMsF,SAASxF,MACrBH,EAAWG,EAAXH,OACA5C,EAAyB+C,EAAzB/C,KAAM4M,EAAmB7J,EAAnB6J,OAAQxC,EAAWrH,EAAXqH,OA6EtB,OA3EAzF,qBAAU,WACJiI,GACFgC,EAAc,yBAEf,CAAChC,IAEJjI,qBAAU,WACR,IAAIgE,GAAY,EA0BhB,OAxBI5H,GAAU4H,IACZ5H,EAAO6H,KAAK,mBAEZ7H,EAAO8H,GAAG,gBAAgB,SAACgF,GACrBlF,GACF+F,EAAiBb,MAIrB9M,EAAO8H,GAAG,wBAAwB,WAChCzH,EAAQ0H,QAAQ,CACdhG,SAAU,kBAAoB4H,EAC9B3H,MAAM,2BAAMA,GAAP,IAAc/C,cAIvBe,EAAO8H,GAAG,iBAAiB,WACzBzH,EAAQ0H,QAAQ,CACdhG,SAAU,YAAc4H,EACxB3H,MAAM,2BAAMA,GAAP,IAAc/C,eAKlB,WACL2I,GAAY,KAEb,CAAC5H,IAEJ4D,qBAAU,WACR,GAA6B,IAAzB8J,EAAcrF,OAAlB,CAGA,IAAM0E,EAAOW,EAAcrL,KAAI,SAAC2J,GAC9B,MAAO,CACL/M,KAAM+M,EAAK/M,KACXqC,MAAO0K,EAAK8B,WAAWd,KACvBe,IAAK/B,EAAKgC,mBAIRf,EAAOS,EAAcrL,KAAI,SAAC2J,GAC9B,MAAO,CACL/M,KAAM+M,EAAK/M,KACXqC,MAAO0K,EAAK8B,WAAWZ,aAIrBC,EAAOO,EAAcrL,KAAI,SAAC2J,GAC9B,MAAO,CACL/M,KAAM+M,EAAK/M,KACXqC,MAAO0K,EAAK8B,WAAWV,UAG3BL,EAAKM,KAAKlB,IAEVc,EAAKI,KAAKlB,IAEVgB,EAAKE,KAAKlB,IACVmB,GAAcP,EAAM,UACpBO,GAAcL,EAAM,cACpBK,GAAcH,EAAM,WACpB,IAAMc,EA/GV,SAAmBlB,EAAME,EAAME,GAE7B,IADA,IAAMc,EAAS,GACNR,EAAI,EAAGA,EAAIV,EAAK1E,OAAQoF,IAAK,CACpC,IAAMxO,EAAO8N,EAAKU,GAAGxO,KACrBgP,EAAOR,GAAK,CACVxO,OACAgM,OAAQ8B,EAAKU,GAAGxC,OAChB8C,IAAKhB,EAAKU,GAAGM,KAGf,IAAK,IAAIG,EAAI,EAAGA,EAAIjB,EAAK5E,OAAQ6F,IAC/B,GAAIjB,EAAKiB,GAAGjP,OAASA,EAAM,CACzBgP,EAAOR,GAAGvC,WAAa+B,EAAKiB,GAAGhD,WAC/B,MAIJ,IAAK,IAAIgD,EAAI,EAAGA,EAAIf,EAAK9E,OAAQ6F,IAC/B,GAAIf,EAAKe,GAAGjP,OAASA,EAAM,CACzBgP,EAAOR,GAAGtC,QAAUgC,EAAKe,GAAG/C,QAC5B,OAIN,OAAO8C,EAuFUE,CAAUpB,EAAME,EAAME,GACrChG,EAAW8G,MACV,CAACP,IAGF,eAAC,IAAD,CACEnN,EAAE,IACFC,EAAE,IACFC,KAAK,KACLC,OAAO,KACPC,cAAc,SACdkE,WAAW,SANb,UAQE,cAAC,IAAD,4BACA,eAAC,IAAD,CAAMI,GAAI,EAAV,4BACiB,cAAC,IAAD,UAAOoE,OAEvBxH,GACC,cAAC,IAAD,CACEX,QAAQ,UACRM,YAAY,SACZC,QAAS,WACHoK,EACF7L,EAAO6H,KAAK,kBAEZ7H,EAAO6H,KAAK,0BAPlB,SAWG+F,IAGL,cAAC,IAAD,CAAM5I,eAAe,SAASiD,SAAS,OAAOzH,EAAG,EAAjD,SACG2B,EAAQE,KAAI,SAAC+L,EAAQ9L,GACpB,OACE,cAAC,EAAD,CAEEmI,IAAK2D,EAAOL,IACZ9O,KAAMmP,EAAOnP,KACb0L,YAAa,aACbD,UAAU,EACVK,gBAAiB,aACjBD,cAAc,EACdD,aAAc,aACdD,WAAW,EACXI,UAAU,EACVC,OAAQmD,EAAOnD,OACfC,WAAYkD,EAAOlD,WACnBC,QAASiD,EAAOjD,SAZX7I,c,6BCpKJ+L,GAFDC,aAAY,CAAEC,OALb,CACbC,iBAAkB,QAClBC,oBAAoB,KC2CPC,OAlCf,WACE,OACE,cAAC,KAAD,CAAgBL,MAAOA,GAAvB,SACE,cAACtH,EAAc4H,SAAf,CAAwBrN,MAAOtB,EAA/B,SACE,cAAC,KAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO4O,KAAK,oBAAZ,SACE,cAAC,GAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,eAAZ,SACE,cAAC,GAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,cAAZ,SACE,cAAC,GAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,cAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,aAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,qBAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACE,cAAC,EAAD,gBC1BCC,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1Bb,O","file":"static/js/main.21e3c827.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  Center,\r\n  Flex,\r\n  Text,\r\n  FormControl,\r\n  FormLabel,\r\n  FormErrorMessage,\r\n  Input,\r\n  Button,\r\n  Heading,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst handleCreateClick = async (name, setError) => {\r\n  const res = await fetch(\"/api/lobby\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ name: name }),\r\n  });\r\n  setError(null);\r\n  const json = await res.json();\r\n\r\n  return json;\r\n};\r\n\r\nconst handleJoinClick = async (code, setError) => {\r\n  const res = await fetch(\"/api/lobby/\" + code);\r\n  if (res.status === 404 || res.status === 401) {\r\n    setError(\"This room does not exist\");\r\n\r\n    return null;\r\n  } else {\r\n    const json = await res.json();\r\n    setError(\"\");\r\n    return json;\r\n  }\r\n};\r\n\r\nconst Home = ({ socket }) => {\r\n  const [code, setCode] = useState(\"\");\r\n  const [error, setError] = useState(null);\r\n  const [name, setName] = useState(null);\r\n  const history = useHistory();\r\n  return (\r\n    <Flex p=\"4\" m=\"2\" minH=\"lg\" shadow=\"lg\" flexDirection=\"column\">\r\n      <Center>\r\n        <Heading textAlign=\"center\">APPS IN WONDERLAND</Heading>\r\n      </Center>\r\n      <Center mt={4}>\r\n        <FormControl isRequired w=\"lg\">\r\n          <FormLabel>Name</FormLabel>\r\n          <Input\r\n            focusBorderColor=\"purple.600\"\r\n            placeholder=\"Enter Name\"\r\n            variant=\"flushed\"\r\n            onChange={(event) => {\r\n              setName(event.target.value);\r\n            }}\r\n          ></Input>\r\n        </FormControl>\r\n      </Center>\r\n      {name && (\r\n        <>\r\n          <Center mt={4}>\r\n            <FormControl isRequired w=\"lg\" isInvalid={error !== null}>\r\n              <FormLabel>Code</FormLabel>\r\n              <Input\r\n                focusBorderColor=\"purple.600\"\r\n                placeholder=\"Enter Code (if joining a game)\"\r\n                variant=\"flushed\"\r\n                onChange={(event) => {\r\n                  setCode(event.target.value);\r\n                }}\r\n              ></Input>\r\n              <FormErrorMessage>{error}</FormErrorMessage>\r\n            </FormControl>\r\n          </Center>\r\n          <Center mt={4}>\r\n            <Button\r\n              w=\"lg\"\r\n              variant=\"outline\"\r\n              colorScheme=\"purple\"\r\n              onClick={async () => {\r\n                const lobbyData = await handleJoinClick(code, setError);\r\n                console.log(lobbyData);\r\n                if (lobbyData !== null) {\r\n                  lobbyData.isHost = false;\r\n                  history.push({\r\n                    pathname: \"Lobby/\" + lobbyData.code,\r\n                    state: { ...lobbyData, name },\r\n                  });\r\n                }\r\n              }}\r\n            >\r\n              Join Game\r\n            </Button>\r\n          </Center>\r\n          <Center mt={4}>\r\n            <Button\r\n              w=\"lg\"\r\n              variant=\"outline\"\r\n              colorScheme=\"purple\"\r\n              onClick={async () => {\r\n                const lobbyData = await handleCreateClick(name, setError);\r\n                if (!error) {\r\n                  lobbyData.isHost = true;\r\n                  history.push({\r\n                    pathname: \"Lobby/\" + lobbyData.code,\r\n                    state: { ...lobbyData, name },\r\n                  });\r\n                }\r\n              }}\r\n            >\r\n              Create Game\r\n            </Button>\r\n          </Center>\r\n        </>\r\n      )}\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { List, ListItem } from \"@chakra-ui/react\";\r\n\r\nconst PlayerList = (props) => {\r\n  const players = props.players;\r\n  return (\r\n    <List bgColor=\"gray.200\" minH=\"3xs\" w=\"xs\" mt={4} p={4} shadow=\"lg\">\r\n      {players &&\r\n        players.map((value, index) => {\r\n          return <ListItem key={index}>{value.name}</ListItem>;\r\n        })}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default PlayerList;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Button = styled.button`\r\n  display: inline-block;\r\n  background-color: white;\r\n  padding: 15px 15px;\r\n  border: 2px solid rgba(164, 53, 170, 0.8);\r\n  color: rgba(164, 53, 194, 0.8);\r\n  transition: all 0.15s;\r\n  margin: 0 0.3em 1.2em 0;\r\n  font-size: 1.5em;\r\n  font-weight: 500;\r\n  cursor: pointer;\r\n  &:hover {\r\n    color: rgba(164, 53, 194, 0.2);\r\n    border-color: rgba(164, 53, 194, 0.2);\r\n  }\r\n  &:active {\r\n    color: whitesmoke;\r\n    border-color: whitesmoke;\r\n  }\r\n  &:disabled {\r\n    color: rgba(164, 53, 194, 0.2);\r\n    border-color: rgba(164, 53, 194, 0.2);\r\n    cursor: default;\r\n  }\r\n  width: 30%;\r\n  @media (max-width: 768px) {\r\n    font-size: 1em;\r\n    padding: 5px 5px;\r\n    width: 80%;\r\n  }\r\n`;\r\n","import React, { forwardRef, useEffect, useRef, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { FaEraser, FaPencilAlt, FaTrash } from \"react-icons/fa\";\r\nimport { Button } from \"../Common/Button\";\r\nimport { IconButton, HStack, Flex } from \"@chakra-ui/react\";\r\n\r\nconst Canvas = forwardRef((props, ref) => {\r\n  if (!ref) {\r\n    throw new Error(\"parent must provide canvas ref\");\r\n  }\r\n\r\n  let canvasRef = ref;\r\n\r\n  const containerRef = useRef(null);\r\n  const [ctx, setCtx] = useState(null);\r\n  const [currentX, setCurrentX] = useState(0);\r\n  const [currentY, setCurrentY] = useState(0);\r\n  const [isDrawing, setIsDrawing] = useState(false);\r\n  const [isDrawingToolSelected, setIsDrawingToolSelected] = useState(true);\r\n  const [currentColor, setCurrentColor] = useState();\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    let ctx = canvas.getContext(\"2d\");\r\n    setCtx(ctx);\r\n    ctx.canvas.width = 300;\r\n    ctx.canvas.height = 420;\r\n    setCurrentColor(\"#000000\");\r\n  }, [ctx]);\r\n\r\n  const drawLine = function (x, y, color) {\r\n    ctx.strokeStyle = currentColor;\r\n    ctx.lineWidth = 3;\r\n    if (!isDrawingToolSelected) {\r\n      ctx.strokeStyle = \"#f2f2f2\";\r\n      ctx.lineWidth = 30;\r\n    }\r\n    ctx.beginPath();\r\n    ctx.moveTo(currentX, currentY);\r\n    ctx.lineTo(x, y);\r\n    ctx.closePath();\r\n    ctx.stroke();\r\n  };\r\n\r\n  const clearCanvas = function () {\r\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n  };\r\n  return (\r\n    <Flex ref={containerRef} p=\"2\" flexDirection=\"column\" alignItems=\"center\">\r\n      <Flex\r\n        bg=\"purple.100\"\r\n        p=\"2\"\r\n        borderRadius=\"lg\"\r\n        justifyContent=\"space-around\"\r\n        width=\"3xs\"\r\n        mb={4}\r\n      >\r\n        <IconButton\r\n          colorScheme=\"purple\"\r\n          disabled={!isDrawingToolSelected}\r\n          aria-label=\"Eraser\"\r\n          icon={<FaEraser />}\r\n          onClick={() => {\r\n            setIsDrawingToolSelected(!isDrawingToolSelected);\r\n          }}\r\n        ></IconButton>\r\n        <IconButton\r\n          colorScheme=\"purple\"\r\n          aria-label=\"Draw\"\r\n          disabled={isDrawingToolSelected}\r\n          icon={<FaPencilAlt />}\r\n          onClick={() => {\r\n            setIsDrawingToolSelected(!isDrawingToolSelected);\r\n          }}\r\n        ></IconButton>\r\n        <IconButton\r\n          colorScheme=\"purple\"\r\n          aria-label=\"Trash\"\r\n          icon={<FaTrash />}\r\n          onClick={clearCanvas}\r\n        ></IconButton>\r\n      </Flex>\r\n      <canvas\r\n        style={{\r\n          backgroundColor: \"#f2f2f2\",\r\n          touchAction: \"none\",\r\n          boxShadow: \"2px 2px 2px 1px rgb(0 0 0 / 20%)\",\r\n        }}\r\n        ref={canvasRef}\r\n        onTouchStart={(e) => {\r\n          let coords = convert(e, ctx.canvas);\r\n          setCurrentX(coords.x);\r\n          setCurrentY(coords.y);\r\n          setIsDrawing(true);\r\n        }}\r\n        onTouchEnd={(e) => {\r\n          if (!isDrawing) {\r\n            return;\r\n          }\r\n          let coords = convert(e, ctx.canvas);\r\n          drawLine(coords.x, coords.y);\r\n          setIsDrawing(false);\r\n        }}\r\n        onTouchMove={(e) => {\r\n          if (!isDrawing) {\r\n            return;\r\n          }\r\n          let coords = convert(e, ctx.canvas);\r\n          drawLine(coords.x, coords.y);\r\n          setCurrentX(coords.x);\r\n          setCurrentY(coords.y);\r\n        }}\r\n        onMouseDown={(e) => {\r\n          setIsDrawing(true);\r\n          setCurrentX(e.nativeEvent.offsetX);\r\n          setCurrentY(e.nativeEvent.offsetY);\r\n        }}\r\n        onMouseUp={(e) => {\r\n          if (!isDrawing) {\r\n            return;\r\n          }\r\n          drawLine(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\r\n          setIsDrawing(false);\r\n        }}\r\n        onMouseMove={(e) => {\r\n          if (!isDrawing) {\r\n            return;\r\n          }\r\n          drawLine(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\r\n          setCurrentX(e.nativeEvent.offsetX);\r\n          setCurrentY(e.nativeEvent.offsetY);\r\n        }}\r\n        onMouseLeave={(e) => {\r\n          setIsDrawing(false);\r\n        }}\r\n      ></canvas>\r\n    </Flex>\r\n  );\r\n});\r\n\r\nconst convert = (e, canvas) => {\r\n  return {\r\n    x: e.changedTouches[0].pageX - canvas.offsetLeft,\r\n    y: e.changedTouches[0].pageY - canvas.offsetTop,\r\n  };\r\n};\r\n\r\nconst CanvasContainer = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  padding: 10px;\r\n  display: flex;\r\n  justify-content: space-evenly;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  @media (max-width: 768px) {\r\n    padding: 0;\r\n  }\r\n`;\r\n\r\nconst StyledCanvas = styled.canvas`\r\n  background-color: #f2f2f2;\r\n  touch-action: none;\r\n  box-shadow: 2px 2px 2px 1px rgb(0 0 0 / 20%);\r\n`;\r\n\r\nexport default Canvas;\r\n","import socketio from \"socket.io-client\";\r\nimport React from \"react\";\r\n\r\nexport const socket = socketio.connect(\r\n  \"https://appsinwonderland.herokuapp.com/\"\r\n);\r\nexport const SocketContext = React.createContext();\r\n","import React, { useContext, useEffect, useState, useRef } from \"react\";\r\nimport PlayerList from \"./PlayerList\";\r\nimport Canvas from \"../Canvas/Canvas\";\r\nimport { useHistory, withRouter } from \"react-router\";\r\nimport { SocketContext } from \"../../Context/socket\";\r\nimport {\r\n  Center,\r\n  Flex,\r\n  Text,\r\n  FormControl,\r\n  Button,\r\n  Code,\r\n  Slider,\r\n  SliderTrack,\r\n  SliderFilledTrack,\r\n  SliderThumb,\r\n  Box,\r\n  Heading,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst Lobby = (props) => {\r\n  const [players, setPlayers] = useState([]);\r\n  const [joined, setJoined] = useState(false);\r\n  const [lobbyDuration, setLobbyDuration] = useState(60);\r\n\r\n  const state = props.location.state;\r\n  const serverCode = state.code;\r\n  const name = state.name;\r\n  const isHost = state.isHost;\r\n  const socket = useContext(SocketContext);\r\n  const history = useHistory();\r\n  const canvasRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const getData = async () => {\r\n      const res = await fetch(\"/api/lobby/\" + serverCode);\r\n      const json = await res.json();\r\n      setPlayers(json.players);\r\n    };\r\n    getData();\r\n  }, [serverCode]);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    if (socket && !joined) {\r\n      if (isMounted) {\r\n        socket.emit(\"join\", { serverCode, name });\r\n        setJoined(true);\r\n      }\r\n      socket.on(\"playerJoined\", (players) => {\r\n        if (isMounted) {\r\n          setPlayers(players);\r\n        }\r\n      });\r\n\r\n      socket.on(\"hostStartedGame\", () => {\r\n        isMounted = false;\r\n        history.replace({\r\n          pathname: \"/Prompt/\" + serverCode,\r\n          state: { ...state, name },\r\n        });\r\n      });\r\n    }\r\n    return () => {\r\n      isMounted = false;\r\n      socket.removeAllListeners(\"playerJoined\");\r\n      socket.removeAllListeners(\"hostStartedGame\");\r\n    };\r\n  }, [socket, joined, name, serverCode, history, state]);\r\n\r\n  const startGame = () => {\r\n    if (socket) {\r\n      const startData = {\r\n        lobbyDuration,\r\n      };\r\n      socket.emit(\"start\", startData);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Flex flexWrap=\"wrap\">\r\n      <Flex\r\n        flexGrow=\"1\"\r\n        p=\"4\"\r\n        m=\"2\"\r\n        minH=\"xl\"\r\n        shadow=\"md\"\r\n        flexDirection=\"column\"\r\n        minW=\"sm\"\r\n        alignItems=\"center\"\r\n      >\r\n        <Heading textAlign=\"center\">WELCOME TO THE LOBBY</Heading>\r\n        <Text fontSize=\"lg\">\r\n          🔥 Join with code <Code colorScheme=\"red\">{serverCode}</Code> 🔥\r\n        </Text>\r\n        <PlayerList players={players} />\r\n        <Text mt={4} fontSize=\"md\">\r\n          Player Count: {players && players.length}\r\n        </Text>\r\n        {isHost && (\r\n          <Flex flexDirection=\"column\" alignItems=\"center\" marginTop=\"auto\">\r\n            <FormControl>\r\n              <Text>Set Round Duration</Text>\r\n              <Slider\r\n                defaultValue={lobbyDuration}\r\n                min={5}\r\n                max={120}\r\n                step={5}\r\n                onChange={(val) => {\r\n                  setLobbyDuration(val);\r\n                }}\r\n                focusThumbOnChange={false}\r\n              >\r\n                <SliderTrack bg=\"purple.100\">\r\n                  <Box position=\"relative\" right={10} />\r\n                  <SliderFilledTrack bg=\"purple.600\" />\r\n                </SliderTrack>\r\n                <SliderThumb boxSize={6} />\r\n              </Slider>\r\n              <Center>\r\n                <Text>{lobbyDuration} seconds</Text>\r\n              </Center>\r\n            </FormControl>\r\n          </Flex>\r\n        )}\r\n        {isHost && (\r\n          <Button\r\n            variant=\"outline\"\r\n            colorScheme=\"purple\"\r\n            mt={12}\r\n            w=\"2xs\"\r\n            onClick={startGame}\r\n          >\r\n            Start\r\n          </Button>\r\n        )}\r\n      </Flex>\r\n      <Flex\r\n        flexGrow=\"1\"\r\n        p=\"4\"\r\n        m=\"2\"\r\n        minH=\"lg\"\r\n        shadow=\"md\"\r\n        flexDirection=\"column\"\r\n        minW=\"sm\"\r\n      >\r\n        <Center>\r\n          <Text fontSize=\"lg\">Test the drawing pad!</Text>\r\n        </Center>\r\n        <Canvas ref={canvasRef}></Canvas>\r\n      </Flex>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default withRouter(Lobby);\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { SocketContext } from \"../../Context/socket\";\r\nimport { useHistory, useParams, withRouter } from \"react-router\";\r\nimport {\r\n  Center,\r\n  Flex,\r\n  Text,\r\n  Heading,\r\n  FormControl,\r\n  Button,\r\n  FormLabel,\r\n  Input,\r\n  CircularProgress,\r\n  CircularProgressLabel,\r\n  Alert,\r\n  AlertIcon,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst PromptInput = (props) => {\r\n  const state = props.location.state;\r\n\r\n  const name = state.name;\r\n  const socket = useContext(SocketContext);\r\n  const [second, setSecond] = useState(30);\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const [prompt, setPrompt] = useState(\"\");\r\n  const [maxSecond, setMaxSecond] = useState(60);\r\n  const history = useHistory();\r\n  const [receivedTimer, setReceivedTimer] = useState(false);\r\n  const { id } = useParams();\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    if (socket) {\r\n      socket.on(\"timerUpdateStart\", (secondData) => {\r\n        if (isMounted) {\r\n          const { second, maxSecond } = secondData;\r\n          setSecond(second);\r\n          setMaxSecond(maxSecond);\r\n          if (!receivedTimer) {\r\n            setReceivedTimer(true);\r\n          }\r\n        }\r\n      });\r\n      socket.on(\"timerDoneStart\", () => {\r\n        if (isMounted) {\r\n          if (!submitted && prompt !== \"\") {\r\n            socket.emit(\"submitPrompt\", prompt);\r\n          }\r\n          history.replace({\r\n            pathname: \"/DrawingScreen/\" + id,\r\n            state: { ...state, name },\r\n          });\r\n        }\r\n      });\r\n    }\r\n    return () => {\r\n      isMounted = false;\r\n      socket.removeAllListeners(\"timerDoneStart\");\r\n      socket.removeAllListeners(\"timerUpdateStart\");\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [history, socket, submitted, prompt]);\r\n  return (\r\n    <Flex p=\"4\" m=\"2\" minH=\"xl\" shadow=\"md\" flexDirection=\"column\">\r\n      <Heading textAlign=\"center\">Enter a drawing prompt</Heading>\r\n      <Text textAlign=\"center\" fontSize=\"sm\" mt={2}>\r\n        Drawing prompts will then be randomly selected to be drawn by the other\r\n        players\r\n      </Text>\r\n\r\n      {receivedTimer && (\r\n        <Center>\r\n          <CircularProgress value={second} max={maxSecond} mt={4}>\r\n            <CircularProgressLabel>{second}</CircularProgressLabel>\r\n          </CircularProgress>\r\n        </Center>\r\n      )}\r\n      {!submitted && (\r\n        <>\r\n          <Center mt={8}>\r\n            <FormControl isRequired w=\"lg\">\r\n              <FormLabel>Prompt</FormLabel>\r\n              <Input\r\n                focusBorderColor=\"purple.600\"\r\n                placeholder=\"Input a suggestion!\"\r\n                variant=\"flushed\"\r\n                onChange={(e) => {\r\n                  setPrompt(e.target.value);\r\n                }}\r\n              />\r\n            </FormControl>\r\n          </Center>\r\n          <Center mt={4}>\r\n            <Button\r\n              w=\"lg\"\r\n              variant=\"outline\"\r\n              colorScheme=\"purple\"\r\n              onClick={() => {\r\n                if (prompt !== \"\") {\r\n                  setSubmitted(true);\r\n                  socket.emit(\"submitPrompt\", prompt);\r\n                }\r\n              }}\r\n            >\r\n              Submit\r\n            </Button>\r\n          </Center>\r\n        </>\r\n      )}\r\n      {submitted && (\r\n        <Center mt=\"auto\">\r\n          <Alert status=\"success\">\r\n            <AlertIcon />\r\n            Thank your for your submission. Waiting for others to submit\r\n          </Alert>\r\n        </Center>\r\n      )}\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default withRouter(PromptInput);\r\n","import React, { useContext, useEffect, useRef, useState } from \"react\";\r\nimport Canvas from \"../Canvas/Canvas\";\r\nimport { SocketContext } from \"../../Context/socket\";\r\nimport { useHistory, useParams, withRouter } from \"react-router\";\r\nimport {\r\n  Flex,\r\n  Text,\r\n  Heading,\r\n  Button,\r\n  CircularProgress,\r\n  CircularProgressLabel,\r\n  Alert,\r\n  AlertIcon,\r\n  Code,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst DrawingScreen = (props) => {\r\n  const socket = useContext(SocketContext);\r\n  const canvasRef = useRef();\r\n  const history = useHistory();\r\n  const { id } = useParams();\r\n\r\n  const [prompt, setPrompt] = useState(\"\");\r\n  const [second, setSecond] = useState(60);\r\n  const [isSubmitted, setIsSubmitted] = useState(false);\r\n  const [receivedTimer, setReceivedTimer] = useState(false);\r\n  const [maxSecond, setMaxSecond] = useState(60);\r\n\r\n  const state = props.location.state;\r\n  const name = state && state.name;\r\n\r\n  useEffect(() => {\r\n    if (socket) {\r\n      socket.emit(\"requestingPrompt\");\r\n      socket.emit(\"startTimer\");\r\n    }\r\n  }, [socket]);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    if (socket && isMounted) {\r\n      socket.on(\"timerUpdate\", (secondData) => {\r\n        const { second, maxSecond } = secondData;\r\n        if (isMounted) {\r\n          setSecond(second);\r\n          setMaxSecond(maxSecond);\r\n        }\r\n        if (!receivedTimer) {\r\n          setReceivedTimer(true);\r\n        }\r\n      });\r\n      socket.on(\"timerDone\", () => {\r\n        if (isMounted) {\r\n          if (!isSubmitted) {\r\n            const dataURL = canvasRef.current.toDataURL();\r\n            const imageData = {\r\n              name,\r\n              dataURL,\r\n            };\r\n            socket.emit(\"submittingImage\", imageData);\r\n          }\r\n\r\n          history.replace({\r\n            pathname: \"/Voting/\" + id,\r\n            state: { ...state, name, prompt },\r\n          });\r\n        }\r\n      });\r\n    }\r\n    return () => {\r\n      isMounted = false;\r\n      socket.removeAllListeners(\"timerDone\");\r\n      socket.removeAllListeners(\"timerUpdate\");\r\n    };\r\n  }, [socket, isSubmitted, receivedTimer]);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    if (socket && isMounted) {\r\n      socket.on(\"sendingPrompt\", (prompt) => {\r\n        if (isMounted) {\r\n          setPrompt(prompt);\r\n        }\r\n      });\r\n      socket.on(\"gameOver\", () => {\r\n        if (isMounted) {\r\n          history.replace(\"/\");\r\n        }\r\n      });\r\n    }\r\n    return () => {\r\n      isMounted = false;\r\n      socket.removeAllListeners(\"sendingPrompt\");\r\n      socket.removeAllListeners(\"gameOver\");\r\n    };\r\n  }, [history, socket, isSubmitted]);\r\n  return (\r\n    <Flex\r\n      p=\"4\"\r\n      m=\"2\"\r\n      minH=\"xl\"\r\n      shadow=\"md\"\r\n      flexDirection=\"column\"\r\n      alignItems=\"center\"\r\n    >\r\n      <Heading size=\"md\">The prompt is:</Heading>\r\n      <Text>\r\n        <Code>{prompt || \"a turtle wearing a top hat\"}</Code>\r\n      </Text>\r\n\r\n      <CircularProgress value={second} max={maxSecond} mt={4}>\r\n        {receivedTimer && (\r\n          <CircularProgressLabel>{second}</CircularProgressLabel>\r\n        )}\r\n      </CircularProgress>\r\n      {!isSubmitted && (\r\n        <>\r\n          <Canvas ref={canvasRef} />\r\n          <Button\r\n            w=\"2xs\"\r\n            variant=\"outline\"\r\n            colorScheme=\"purple\"\r\n            onClick={() => {\r\n              setIsSubmitted(true);\r\n              const dataURL = canvasRef.current.toDataURL();\r\n              const imageData = {\r\n                name,\r\n                dataURL,\r\n              };\r\n              socket.emit(\"submittingImage\", imageData);\r\n            }}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </>\r\n      )}\r\n      {isSubmitted && (\r\n        <Alert status=\"success\" mt=\"auto\">\r\n          <AlertIcon />\r\n          Thank your for your submission. Waiting for others to submit\r\n        </Alert>\r\n      )}\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default withRouter(DrawingScreen);\r\n","import React, { useContext } from \"react\";\nimport { SocketContext } from \"../../Context/socket\";\nimport { Flex, Box, Image, VStack, Button } from \"@chakra-ui/react\";\n\nconst TileCard = (props) => {\n  const { bgColor } = props;\n  return (\n    <Box borderRadius=\"md\" mb=\"1\" p=\"1\" textAlign=\"center\" bgColor={bgColor}>\n      {props.children}\n    </Box>\n  );\n};\n\nconst VotingButton = (props) => {\n  const { bgColor, onClick } = props;\n  return (\n    <Button\n      w=\"2xs\"\n      bgColor={bgColor}\n      borderRadius=\"md\"\n      padding=\"2\"\n      onClick={onClick}\n    >\n      {props.children}\n    </Button>\n  );\n};\n\nconst VotingCard = ({\n  src,\n  name,\n  showBest,\n  setShowBest,\n  showWeird,\n  setShowWeird,\n  showCreative,\n  setShowCreative,\n  showName,\n  isBest,\n  isCreative,\n  isWeird,\n}) => {\n  const socket = useContext(SocketContext);\n\n  return (\n    <Flex flexDirection=\"column\" w=\"300px\" m={2}>\n      <Flex\n        flexDirection=\"column\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        backgroundColor=\"#f2f2f2\"\n        mb={2}\n      >\n        <Image alt=\"user drawing\" src={src} />\n        <Box margin=\"1\">\n          {isBest && <TileCard bgColor=\"#67e9a3\">🥇 Best Drawing 🥇</TileCard>}\n          {isCreative && (\n            <TileCard bgColor=\"#7CE3F1\">🎨 Most Creative 🎨</TileCard>\n          )}\n          {isWeird && <TileCard bgColor=\"#FD7070\">🤔 ??? 🤔</TileCard>}\n        </Box>\n\n        {showName && (\n          <Box mt=\"auto\" bgColor=\"white\" p=\"2\" mb=\"2\" borderRadius=\"md\">\n            Drawing by {name}\n          </Box>\n        )}\n      </Flex>\n      <VStack spacing={2}>\n        {showBest && (\n          <VotingButton\n            bgColor=\"#67e9a3\"\n            onClick={() => {\n              setShowBest(false);\n              socket.emit(\"voteForPlayer\", { name: name, category: \"best\" });\n            }}\n          >\n            🥇 Best Drawing 🥇\n          </VotingButton>\n        )}\n\n        {showCreative && (\n          <VotingButton\n            bgColor=\"#7CE3F1\"\n            onClick={() => {\n              setShowCreative(false);\n              socket.emit(\"voteForPlayer\", {\n                name: name,\n                category: \"creative\",\n              });\n            }}\n          >\n            🎨 Most Creative 🎨\n          </VotingButton>\n        )}\n\n        {showWeird && (\n          <VotingButton\n            bgColor=\"#FD7070\"\n            onClick={() => {\n              setShowWeird(false);\n              socket.emit(\"voteForPlayer\", { name: name, category: \"weird\" });\n            }}\n          >\n            🤔 ??? 🤔\n          </VotingButton>\n        )}\n      </VStack>\n    </Flex>\n  );\n};\n\nexport default VotingCard;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport VotingCard from \"./VotingCard\";\nimport { SocketContext } from \"../../Context/socket\";\nimport { useHistory, useParams } from \"react-router\";\nimport { withRouter } from \"react-router-dom\";\nimport { Flex, Heading, Text, Code } from \"@chakra-ui/react\";\n\nconst Voting = (props) => {\n  const socket = useContext(SocketContext);\n  const [images, setImages] = useState([]);\n  const history = useHistory();\n  const { id } = useParams();\n\n  const [requestedImages, setRequestedImages] = useState(false);\n  const [showBest, setShowBest] = useState(true);\n  const [showCreative, setShowCreative] = useState(true);\n  const [showWeird, setShowWeird] = useState(true);\n\n  const state = props.location.state;\n  const name = state && state.name;\n  const prompt = state && state.prompt;\n\n  useEffect(() => {\n    let isMounted = true;\n    if (socket && !requestedImages && isMounted) {\n      socket.emit(\"requestingImages\");\n      if (isMounted) {\n        setRequestedImages(true);\n      }\n\n      socket.on(\"sendingImages\", (imgs) => {\n        if (isMounted) {\n          setImages(imgs);\n        }\n      });\n\n      socket.on(\"lastVoteDraw\", () => {\n        if (isMounted) {\n          history.replace({\n            pathname: \"/RoundResults/\" + id,\n            state: { ...state, name, isLast: false, prompt },\n          });\n        }\n      });\n\n      socket.on(\"lastVoteEnd\", () => {\n        if (isMounted) {\n          history.replace({\n            pathname: \"/RoundResults/\" + id,\n            state: { ...state, name, isLast: true, prompt },\n          });\n        }\n      });\n    }\n\n    return () => {\n      isMounted = false;\n      socket.removeAllListeners(\"sendingImages\");\n      socket.removeAllListeners(\"lastVoteDraw\");\n      socket.removeAllListeners(\"lastVoteEnd\");\n    };\n  }, []);\n\n  return (\n    <Flex\n      p=\"4\"\n      m=\"2\"\n      minH=\"xl\"\n      shadow=\"md\"\n      flexDirection=\"column\"\n      alignItems=\"center\"\n    >\n      <Heading>Vote!</Heading>\n      <Text>\n        For the prompt <Code>{prompt}</Code>\n      </Text>\n      <Flex justifyContent=\"center\" flexWrap=\"wrap\" margin=\"1\">\n        {images.map((value, index) => {\n          return (\n            <VotingCard\n              key={index}\n              src={value.dataURL}\n              name={value.name}\n              showBest={showBest}\n              setShowBest={setShowBest}\n              showCreative={showCreative}\n              setShowCreative={setShowCreative}\n              showWeird={showWeird}\n              setShowWeird={setShowWeird}\n              showName={false}\n            />\n          );\n        })}\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default withRouter(Voting);\n","import React from \"react\";\nimport { Flex, Text, List, ListItem } from \"@chakra-ui/react\";\n\nconst Rankings = (props) => {\n  const { title, data, color } = props;\n  return (\n    <Flex\n      minW=\"xs\"\n      flexDirection=\"column\"\n      flex=\"1\"\n      alignItems=\"center\"\n      mt={2}\n      mb={2}\n    >\n      <Text bgColor={color} p=\"2\" borderRadius=\"md\" mb={2} w=\"80%\">\n        {title}\n      </Text>\n      <List>\n        {data.map((value, index) => {\n          return (\n            <ListItem key={index}>\n              {index === 0 && \" 🥇 \"}\n              {value.name}{\" \"}\n              <Text display=\"inline\" color=\"red\">\n                {\" \"}\n                ({value.value} votes)\n              </Text>\n            </ListItem>\n          );\n        })}\n      </List>\n    </Flex>\n  );\n};\n\nexport default Rankings;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { SocketContext } from \"../../Context/socket\";\nimport Rankings from \"./Rankings\";\nimport { Flex, Heading } from \"@chakra-ui/react\";\n\nfunction mySort(a, b) {\n  if (a.value > b.value) {\n    return -1;\n  } else {\n    return 1;\n  }\n}\nconst Results = () => {\n  const [bestArray, setBestArray] = useState([]);\n  const [creativeArray, setCreativeArray] = useState([]);\n  const [weirdArray, setWeirdArray] = useState([]);\n  const [playerData, setPlayerData] = useState([]);\n\n  const socket = useContext(SocketContext);\n\n  useEffect(() => {\n    let isMounted = true;\n\n    if (socket && isMounted) {\n      socket.emit(\"requestingVotes\");\n\n      socket.on(\"sendingVotes\", (votes) => {\n        if (isMounted) {\n          setPlayerData(votes);\n        }\n      });\n    }\n\n    return () => {\n      isMounted = false;\n    };\n  }, [socket]);\n\n  useEffect(() => {\n    const arr1 = playerData.map((data) => {\n      return {\n        name: data.name,\n        value: data.votes.best,\n      };\n    });\n\n    const arr2 = playerData.map((data) => {\n      return {\n        name: data.name,\n        value: data.votes.creative,\n      };\n    });\n\n    const arr3 = playerData.map((data) => {\n      return {\n        name: data.name,\n        value: data.votes.weird,\n      };\n    });\n    arr1.sort(mySort);\n    setBestArray(arr1);\n\n    arr2.sort(mySort);\n    setCreativeArray(arr2);\n\n    arr3.sort(mySort);\n    setWeirdArray(arr3);\n  }, [playerData]);\n  return (\n    <Flex\n      p=\"4\"\n      m=\"2\"\n      minH=\"lg\"\n      shadow=\"lg\"\n      textAlign=\"center\"\n      flexDirection=\"column\"\n    >\n      <Heading mb={2}>Final Results!</Heading>\n\n      <Flex textAlign=\"center\" flexWrap=\"wrap\">\n        <Rankings title=\"Best Drawing\" color=\"#67e9a3\" data={bestArray} />\n        <Rankings title=\"Most Creative\" color=\"#7CE3F1\" data={creativeArray} />\n        <Rankings title=\"???? Drawing\" color=\"#FD7070\" data={weirdArray} />\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default Results;\n","import React, { useEffect, useState, useContext } from \"react\";\nimport VotingCard from \"../Voting/VotingCard\";\nimport { SocketContext } from \"../../Context/socket\";\nimport { useHistory, useParams, withRouter } from \"react-router-dom\";\nimport { Flex, Heading, Button, Text, Code } from \"@chakra-ui/react\";\n\nfunction mySort(a, b) {\n  if (a.value > b.value) {\n    return -1;\n  } else {\n    return 1;\n  }\n}\n\nfunction setTopPlayers(sortedPlayers, category) {\n  const topCount = sortedPlayers[0].value;\n\n  for (let i = 0; i < sortedPlayers.length; i++) {\n    if (sortedPlayers[i].value === topCount) {\n      sortedPlayers[i][category] = true;\n    } else {\n      sortedPlayers[i][category] = false;\n    }\n  }\n}\n\nfunction mergeArrs(arr1, arr2, arr3) {\n  const newArr = [];\n  for (let i = 0; i < arr1.length; i++) {\n    const name = arr1[i].name;\n    newArr[i] = {\n      name,\n      isBest: arr1[i].isBest,\n      img: arr1[i].img,\n    };\n\n    for (let j = 0; j < arr2.length; j++) {\n      if (arr2[j].name === name) {\n        newArr[i].isCreative = arr2[j].isCreative;\n        break;\n      }\n    }\n\n    for (let j = 0; j < arr3.length; j++) {\n      if (arr3[j].name === name) {\n        newArr[i].isWeird = arr3[j].isWeird;\n        break;\n      }\n    }\n  }\n  return newArr;\n}\n\nconst RoundResults = (props) => {\n  const [players, setPlayers] = useState([]);\n  const [serverPlayers, setServerPlayers] = useState([]);\n  const [buttonText, setButtonText] = useState(\"Next Round\");\n\n  const history = useHistory();\n  const { id } = useParams();\n\n  const socket = useContext(SocketContext);\n  const state = props.location.state;\n  const { isHost } = state;\n  const { name, isLast, prompt } = state;\n\n  useEffect(() => {\n    if (isLast) {\n      setButtonText(\"Go To Final Results\");\n    }\n  }, [isLast]);\n\n  useEffect(() => {\n    let isMounted = true;\n\n    if (socket && isMounted) {\n      socket.emit(\"requestingVotes\");\n\n      socket.on(\"sendingVotes\", (votes) => {\n        if (isMounted) {\n          setServerPlayers(votes);\n        }\n      });\n\n      socket.on(\"hostStartedNextRound\", () => {\n        history.replace({\n          pathname: \"/DrawingScreen/\" + id,\n          state: { ...state, name },\n        });\n      });\n\n      socket.on(\"hostEndedGame\", () => {\n        history.replace({\n          pathname: \"/Results/\" + id,\n          state: { ...state, name },\n        });\n      });\n    }\n\n    return () => {\n      isMounted = false;\n    };\n  }, [socket]);\n\n  useEffect(() => {\n    if (serverPlayers.length === 0) {\n      return;\n    }\n    const arr1 = serverPlayers.map((data) => {\n      return {\n        name: data.name,\n        value: data.roundVotes.best,\n        img: data.currentDrawing,\n      };\n    });\n\n    const arr2 = serverPlayers.map((data) => {\n      return {\n        name: data.name,\n        value: data.roundVotes.creative,\n      };\n    });\n\n    const arr3 = serverPlayers.map((data) => {\n      return {\n        name: data.name,\n        value: data.roundVotes.weird,\n      };\n    });\n    arr1.sort(mySort);\n\n    arr2.sort(mySort);\n\n    arr3.sort(mySort);\n    setTopPlayers(arr1, \"isBest\");\n    setTopPlayers(arr2, \"isCreative\");\n    setTopPlayers(arr3, \"isWeird\");\n    const newArr = mergeArrs(arr1, arr2, arr3);\n    setPlayers(newArr);\n  }, [serverPlayers]);\n\n  return (\n    <Flex\n      p=\"4\"\n      m=\"2\"\n      minH=\"xl\"\n      shadow=\"md\"\n      flexDirection=\"column\"\n      alignItems=\"center\"\n    >\n      <Heading>Round Results</Heading>\n      <Text mb={2}>\n        For the prompt <Code>{prompt}</Code>\n      </Text>\n      {isHost && (\n        <Button\n          variant=\"outline\"\n          colorScheme=\"purple\"\n          onClick={() => {\n            if (isLast) {\n              socket.emit(\"hostEndingGame\");\n            } else {\n              socket.emit(\"hostStartingNextRound\");\n            }\n          }}\n        >\n          {buttonText}\n        </Button>\n      )}\n      <Flex justifyContent=\"center\" flexWrap=\"wrap\" m={2}>\n        {players.map((player, index) => {\n          return (\n            <VotingCard\n              key={index}\n              src={player.img}\n              name={player.name}\n              setShowBest={() => {}}\n              showBest={false}\n              setShowCreative={() => {}}\n              showCreative={false}\n              setShowWeird={() => {}}\n              showWeird={false}\n              showName={true}\n              isBest={player.isBest}\n              isCreative={player.isCreative}\n              isWeird={player.isWeird}\n            />\n          );\n        })}\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default withRouter(RoundResults);\n","import { extendTheme } from \"@chakra-ui/react\";\n\nconst config = {\n  initialColorMode: \"light\",\n  useSystemColorMode: false,\n};\n\nconst theme = extendTheme({ config });\n\nexport default theme;\n","import React from \"react\";\r\nimport Home from \"./Components/Home/Home\";\r\nimport Lobby from \"./Components/Lobby/Lobby\";\r\nimport PromptInput from \"./Components/PromptInput/PromptInput\";\r\nimport DrawingScreen from \"./Components/DrawingScreen/DrawingScreen\";\r\nimport Voting from \"./Components/Voting/Voting\";\r\nimport Results from \"./Components/Results/Results\";\r\nimport RoundResults from \"./Components/RoundResults/RoundResults\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport { SocketContext, socket } from \"./Context/socket\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport theme from \"./theme\";\r\n\r\nfunction App() {\r\n  return (\r\n    <ChakraProvider theme={theme}>\r\n      <SocketContext.Provider value={socket}>\r\n        <Router>\r\n          <Switch>\r\n            <Route path=\"/RoundResults/:id\">\r\n              <RoundResults />\r\n            </Route>\r\n            <Route path=\"/Results/:id\">\r\n              <Results />\r\n            </Route>\r\n            <Route path=\"/Voting/:id\">\r\n              <Voting />\r\n            </Route>\r\n            <Route path=\"/Prompt/:id\">\r\n              <PromptInput />\r\n            </Route>\r\n            <Route path=\"/Lobby/:id\">\r\n              <Lobby />\r\n            </Route>\r\n            <Route path=\"/DrawingScreen/:id\">\r\n              <DrawingScreen />\r\n            </Route>\r\n            <Route path=\"/\">\r\n              <Home />\r\n            </Route>\r\n          </Switch>\r\n        </Router>\r\n      </SocketContext.Provider>\r\n    </ChakraProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}