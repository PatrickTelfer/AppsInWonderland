{"version":3,"sources":["Components/Home/Home.js","Components/Lobby/PlayerList.js","Components/Common/Button.js","Components/Canvas/Canvas.js","Context/socket.js","Components/Lobby/Lobby.js","Components/PromptInput/PromptInput.js","Components/DrawingScreen/DrawingScreen.js","Components/Voting/VotingCard.js","Components/Voting/Voting.js","Components/Results/Rankings.js","Components/Results/Results.js","Components/RoundResults/RoundResults.js","theme.js","App.js","reportWebVitals.js","index.js"],"names":["handleCreateClick","name","setError","fetch","method","headers","body","JSON","stringify","res","json","handleJoinClick","code","status","Home","socket","useState","setCode","error","setName","history","useHistory","p","m","minH","shadow","flexDirection","textAlign","mt","isRequired","w","focusBorderColor","placeholder","variant","onChange","event","target","value","isInvalid","colorScheme","onClick","a","lobbyData","console","log","isHost","push","pathname","state","PlayerList","props","players","bgColor","map","index","styled","button","Canvas","forwardRef","ref","Error","canvasRef","containerRef","useRef","ctx","setCtx","currentX","setCurrentX","currentY","setCurrentY","isDrawing","setIsDrawing","isDrawingToolSelected","setIsDrawingToolSelected","currentColor","setCurrentColor","useEffect","current","getContext","canvas","width","height","drawLine","x","y","color","strokeStyle","lineWidth","beginPath","moveTo","lineTo","closePath","stroke","alignItems","bg","borderRadius","justifyContent","mb","disabled","aria-label","icon","clearRect","style","backgroundColor","touchAction","boxShadow","onTouchStart","e","coords","convert","onTouchEnd","onTouchMove","onMouseDown","nativeEvent","offsetX","offsetY","onMouseUp","onMouseMove","onMouseLeave","changedTouches","pageX","offsetLeft","pageY","offsetTop","div","socketio","connect","SocketContext","React","createContext","withRouter","setPlayers","joined","setJoined","lobbyDuration","setLobbyDuration","location","serverCode","useContext","getData","isMounted","on","emit","replace","removeAllListeners","flexWrap","flexGrow","minW","fontSize","length","marginTop","defaultValue","min","max","step","val","focusThumbOnChange","position","right","boxSize","startData","second","setSecond","submitted","setSubmitted","prompt","setPrompt","maxSecond","setMaxSecond","receivedTimer","setReceivedTimer","id","useParams","secondData","isSubmitted","setIsSubmitted","dataURL","toDataURL","imageData","size","TileCard","children","VotingButton","padding","VotingCard","src","showBest","setShowBest","showWeird","setShowWeird","showCreative","setShowCreative","showName","isBest","isCreative","isWeird","alt","margin","spacing","category","images","setImages","requestedImages","setRequestedImages","imgs","isLast","Rankings","title","data","flex","display","mySort","b","Results","bestArray","setBestArray","creativeArray","setCreativeArray","weirdArray","setWeirdArray","playerData","setPlayerData","votes","arr1","best","arr2","creative","arr3","weird","sort","setTopPlayers","sortedPlayers","topCount","i","serverPlayers","setServerPlayers","buttonText","setButtonText","roundVotes","img","currentDrawing","newArr","j","mergeArrs","player","theme","extendTheme","config","initialColorMode","useSystemColorMode","App","Provider","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2e85d95a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  Center,\n  Flex,\n  Text,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  Button,\n  Heading,\n} from \"@chakra-ui/react\";\n\nconst handleCreateClick = async (name, setError) => {\n  const res = await fetch(\"/api/lobby\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ name: name }),\n  });\n  setError(null);\n  const json = await res.json();\n\n  return json;\n};\n\nconst handleJoinClick = async (code, setError) => {\n  const res = await fetch(\"/api/lobby/\" + code);\n  if (res.status === 404 || res.status === 401) {\n    setError(\"This room does not exist\");\n\n    return null;\n  } else {\n    const json = await res.json();\n    setError(\"\");\n    return json;\n  }\n};\n\nconst Home = ({ socket }) => {\n  const [code, setCode] = useState(\"\");\n  const [error, setError] = useState(null);\n  const [name, setName] = useState(null);\n  const history = useHistory();\n  return (\n    <Flex p=\"4\" m=\"2\" minH=\"lg\" shadow=\"lg\" flexDirection=\"column\">\n      <Center>\n        <Heading textAlign=\"center\">APPS IN WONDERLAND</Heading>\n      </Center>\n      <Center mt={4}>\n        <FormControl isRequired w=\"lg\">\n          <FormLabel>Name</FormLabel>\n          <Input\n            focusBorderColor=\"purple.600\"\n            placeholder=\"Enter Name\"\n            variant=\"flushed\"\n            onChange={(event) => {\n              setName(event.target.value);\n            }}\n          ></Input>\n        </FormControl>\n      </Center>\n      {name && (\n        <>\n          <Center mt={4}>\n            <FormControl isRequired w=\"lg\" isInvalid={error !== null}>\n              <FormLabel>Code</FormLabel>\n              <Input\n                focusBorderColor=\"purple.600\"\n                placeholder=\"Enter Code (if joining a game)\"\n                variant=\"flushed\"\n                onChange={(event) => {\n                  setCode(event.target.value);\n                }}\n              ></Input>\n              <FormErrorMessage>{error}</FormErrorMessage>\n            </FormControl>\n          </Center>\n          <Center mt={4}>\n            <Button\n              w=\"lg\"\n              variant=\"outline\"\n              colorScheme=\"purple\"\n              onClick={async () => {\n                const lobbyData = await handleJoinClick(code, setError);\n                console.log(lobbyData);\n                if (lobbyData !== null) {\n                  lobbyData.isHost = false;\n                  history.push({\n                    pathname: \"Lobby/\" + lobbyData.code,\n                    state: { ...lobbyData, name },\n                  });\n                }\n              }}\n            >\n              Join Game\n            </Button>\n          </Center>\n          <Center mt={4}>\n            <Button\n              w=\"lg\"\n              variant=\"outline\"\n              colorScheme=\"purple\"\n              onClick={async () => {\n                const lobbyData = await handleCreateClick(name, setError);\n                if (!error) {\n                  lobbyData.isHost = true;\n                  history.push({\n                    pathname: \"Lobby/\" + lobbyData.code,\n                    state: { ...lobbyData, name },\n                  });\n                }\n              }}\n            >\n              Create Game\n            </Button>\n          </Center>\n        </>\n      )}\n    </Flex>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport { List, ListItem } from \"@chakra-ui/react\";\n\nconst PlayerList = (props) => {\n  const players = props.players;\n  return (\n    <List bgColor=\"gray.200\" minH=\"3xs\" w=\"xs\" mt={4} p={4} shadow=\"lg\">\n      {players &&\n        players.map((value, index) => {\n          return <ListItem key={index}>{value.name}</ListItem>;\n        })}\n    </List>\n  );\n};\n\nexport default PlayerList;\n","import styled from \"styled-components\";\n\nexport const Button = styled.button`\n  display: inline-block;\n  background-color: white;\n  padding: 15px 15px;\n  border: 2px solid rgba(164, 53, 170, 0.8);\n  color: rgba(164, 53, 194, 0.8);\n  transition: all 0.15s;\n  margin: 0 0.3em 1.2em 0;\n  font-size: 1.5em;\n  font-weight: 500;\n  cursor: pointer;\n  &:hover {\n    color: rgba(164, 53, 194, 0.2);\n    border-color: rgba(164, 53, 194, 0.2);\n  }\n  &:active {\n    color: whitesmoke;\n    border-color: whitesmoke;\n  }\n  &:disabled {\n    color: rgba(164, 53, 194, 0.2);\n    border-color: rgba(164, 53, 194, 0.2);\n    cursor: default;\n  }\n  width: 30%;\n  @media (max-width: 768px) {\n    font-size: 1em;\n    padding: 5px 5px;\n    width: 80%;\n  }\n`;\n","import React, { forwardRef, useEffect, useRef, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { FaEraser, FaPencilAlt, FaTrash } from \"react-icons/fa\";\nimport { Button } from \"../Common/Button\";\nimport { IconButton, HStack, Flex } from \"@chakra-ui/react\";\n\nconst Canvas = forwardRef((props, ref) => {\n  if (!ref) {\n    throw new Error(\"parent must provide canvas ref\");\n  }\n\n  let canvasRef = ref;\n\n  const containerRef = useRef(null);\n  const [ctx, setCtx] = useState(null);\n  const [currentX, setCurrentX] = useState(0);\n  const [currentY, setCurrentY] = useState(0);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [isDrawingToolSelected, setIsDrawingToolSelected] = useState(true);\n  const [currentColor, setCurrentColor] = useState();\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    let ctx = canvas.getContext(\"2d\");\n    setCtx(ctx);\n    ctx.canvas.width = 300;\n    ctx.canvas.height = 420;\n    setCurrentColor(\"#000000\");\n  }, [ctx]);\n\n  const drawLine = function (x, y, color) {\n    ctx.strokeStyle = currentColor;\n    ctx.lineWidth = 3;\n    if (!isDrawingToolSelected) {\n      ctx.strokeStyle = \"#f2f2f2\";\n      ctx.lineWidth = 30;\n    }\n    ctx.beginPath();\n    ctx.moveTo(currentX, currentY);\n    ctx.lineTo(x, y);\n    ctx.closePath();\n    ctx.stroke();\n  };\n\n  const clearCanvas = function () {\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  };\n  return (\n    <Flex ref={containerRef} p=\"2\" flexDirection=\"column\" alignItems=\"center\">\n      <Flex\n        bg=\"purple.100\"\n        p=\"2\"\n        borderRadius=\"lg\"\n        justifyContent=\"space-around\"\n        width=\"3xs\"\n        mb={4}\n      >\n        <IconButton\n          colorScheme=\"purple\"\n          disabled={!isDrawingToolSelected}\n          aria-label=\"Eraser\"\n          icon={<FaEraser />}\n          onClick={() => {\n            setIsDrawingToolSelected(!isDrawingToolSelected);\n          }}\n        ></IconButton>\n        <IconButton\n          colorScheme=\"purple\"\n          aria-label=\"Draw\"\n          disabled={isDrawingToolSelected}\n          icon={<FaPencilAlt />}\n          onClick={() => {\n            setIsDrawingToolSelected(!isDrawingToolSelected);\n          }}\n        ></IconButton>\n        <IconButton\n          colorScheme=\"purple\"\n          aria-label=\"Trash\"\n          icon={<FaTrash />}\n          onClick={clearCanvas}\n        ></IconButton>\n      </Flex>\n      <canvas\n        style={{\n          backgroundColor: \"#f2f2f2\",\n          touchAction: \"none\",\n          boxShadow: \"2px 2px 2px 1px rgb(0 0 0 / 20%)\",\n        }}\n        ref={canvasRef}\n        onTouchStart={(e) => {\n          let coords = convert(e, ctx.canvas);\n          setCurrentX(coords.x);\n          setCurrentY(coords.y);\n          setIsDrawing(true);\n        }}\n        onTouchEnd={(e) => {\n          if (!isDrawing) {\n            return;\n          }\n          let coords = convert(e, ctx.canvas);\n          drawLine(coords.x, coords.y);\n          setIsDrawing(false);\n        }}\n        onTouchMove={(e) => {\n          if (!isDrawing) {\n            return;\n          }\n          let coords = convert(e, ctx.canvas);\n          drawLine(coords.x, coords.y);\n          setCurrentX(coords.x);\n          setCurrentY(coords.y);\n        }}\n        onMouseDown={(e) => {\n          setIsDrawing(true);\n          setCurrentX(e.nativeEvent.offsetX);\n          setCurrentY(e.nativeEvent.offsetY);\n        }}\n        onMouseUp={(e) => {\n          if (!isDrawing) {\n            return;\n          }\n          drawLine(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\n          setIsDrawing(false);\n        }}\n        onMouseMove={(e) => {\n          if (!isDrawing) {\n            return;\n          }\n          drawLine(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\n          setCurrentX(e.nativeEvent.offsetX);\n          setCurrentY(e.nativeEvent.offsetY);\n        }}\n        onMouseLeave={(e) => {\n          setIsDrawing(false);\n        }}\n      ></canvas>\n    </Flex>\n  );\n});\n\nconst convert = (e, canvas) => {\n  return {\n    x: e.changedTouches[0].pageX - canvas.offsetLeft,\n    y: e.changedTouches[0].pageY - canvas.offsetTop,\n  };\n};\n\nconst CanvasContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  padding: 10px;\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n  flex-direction: column;\n  @media (max-width: 768px) {\n    padding: 0;\n  }\n`;\n\nconst StyledCanvas = styled.canvas`\n  background-color: #f2f2f2;\n  touch-action: none;\n  box-shadow: 2px 2px 2px 1px rgb(0 0 0 / 20%);\n`;\n\nexport default Canvas;\n","import socketio from \"socket.io-client\";\nimport React from \"react\";\n\nexport const socket = socketio.connect(\n  \"https://appsinwonderland.onrender.com\"\n);\nexport const SocketContext = React.createContext();\n","import React, { useContext, useEffect, useState, useRef } from \"react\";\nimport PlayerList from \"./PlayerList\";\nimport Canvas from \"../Canvas/Canvas\";\nimport { useHistory, withRouter } from \"react-router\";\nimport { SocketContext } from \"../../Context/socket\";\nimport {\n  Center,\n  Flex,\n  Text,\n  FormControl,\n  Button,\n  Code,\n  Slider,\n  SliderTrack,\n  SliderFilledTrack,\n  SliderThumb,\n  Box,\n  Heading,\n} from \"@chakra-ui/react\";\n\nconst Lobby = (props) => {\n  const [players, setPlayers] = useState([]);\n  const [joined, setJoined] = useState(false);\n  const [lobbyDuration, setLobbyDuration] = useState(60);\n\n  const state = props.location.state;\n  const serverCode = state.code;\n  const name = state.name;\n  const isHost = state.isHost;\n  const socket = useContext(SocketContext);\n  const history = useHistory();\n  const canvasRef = useRef();\n\n  useEffect(() => {\n    const getData = async () => {\n      const res = await fetch(\"/api/lobby/\" + serverCode);\n      const json = await res.json();\n      setPlayers(json.players);\n    };\n    getData();\n  }, [serverCode]);\n\n  useEffect(() => {\n    let isMounted = true;\n\n    if (socket && isMounted) {\n      socket.on(\"playerJoined\", (players) => {\n        if (isMounted) {\n          setPlayers(players);\n        }\n      });\n    }\n\n    if (socket && isMounted && !joined) {\n      socket.emit(\"join\", { serverCode, name });\n      setJoined(true);\n    }\n\n    if (socket && isMounted) {\n      socket.on(\"hostStartedGame\", () => {\n        isMounted = false;\n        history.replace({\n          pathname: \"/Prompt/\" + serverCode,\n          state: { ...state, name },\n        });\n      });\n    }\n\n    return () => {\n      isMounted = false;\n      socket.removeAllListeners(\"playerJoined\");\n      socket.removeAllListeners(\"hostStartedGame\");\n    };\n  }, [socket, joined, name, serverCode, history, state]);\n\n  const startGame = () => {\n    if (socket) {\n      const startData = {\n        lobbyDuration,\n      };\n      socket.emit(\"start\", startData);\n    }\n  };\n\n  return (\n    <Flex flexWrap=\"wrap\">\n      <Flex\n        flexGrow=\"1\"\n        p=\"4\"\n        m=\"2\"\n        minH=\"xl\"\n        shadow=\"md\"\n        flexDirection=\"column\"\n        minW=\"sm\"\n        alignItems=\"center\"\n      >\n        <Heading textAlign=\"center\">WELCOME TO THE LOBBY</Heading>\n        <Text fontSize=\"lg\">\n          🔥 Join with code <Code colorScheme=\"red\">{serverCode}</Code> 🔥\n        </Text>\n        <PlayerList players={players} />\n        <Text mt={4} fontSize=\"md\">\n          Player Count: {players && players.length}\n        </Text>\n        {isHost && (\n          <Flex flexDirection=\"column\" alignItems=\"center\" marginTop=\"auto\">\n            <FormControl>\n              <Text>Set Round Duration</Text>\n              <Slider\n                defaultValue={lobbyDuration}\n                min={5}\n                max={120}\n                step={5}\n                onChange={(val) => {\n                  setLobbyDuration(val);\n                }}\n                focusThumbOnChange={false}\n              >\n                <SliderTrack bg=\"purple.100\">\n                  <Box position=\"relative\" right={10} />\n                  <SliderFilledTrack bg=\"purple.600\" />\n                </SliderTrack>\n                <SliderThumb boxSize={6} />\n              </Slider>\n              <Center>\n                <Text>{lobbyDuration} seconds</Text>\n              </Center>\n            </FormControl>\n          </Flex>\n        )}\n        {isHost && (\n          <Button\n            variant=\"outline\"\n            colorScheme=\"purple\"\n            mt={12}\n            w=\"2xs\"\n            onClick={startGame}\n          >\n            Start\n          </Button>\n        )}\n      </Flex>\n      <Flex\n        flexGrow=\"1\"\n        p=\"4\"\n        m=\"2\"\n        minH=\"lg\"\n        shadow=\"md\"\n        flexDirection=\"column\"\n        minW=\"sm\"\n      >\n        <Center>\n          <Text fontSize=\"lg\">Test the drawing pad!</Text>\n        </Center>\n        <Canvas ref={canvasRef}></Canvas>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default withRouter(Lobby);\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { SocketContext } from \"../../Context/socket\";\nimport { useHistory, useParams, withRouter } from \"react-router\";\nimport {\n  Center,\n  Flex,\n  Text,\n  Heading,\n  FormControl,\n  Button,\n  FormLabel,\n  Input,\n  CircularProgress,\n  CircularProgressLabel,\n  Alert,\n  AlertIcon,\n} from \"@chakra-ui/react\";\n\nconst PromptInput = (props) => {\n  const state = props.location.state;\n\n  const name = state.name;\n  const socket = useContext(SocketContext);\n  const [second, setSecond] = useState(30);\n  const [submitted, setSubmitted] = useState(false);\n  const [prompt, setPrompt] = useState(\"\");\n  const [maxSecond, setMaxSecond] = useState(60);\n  const history = useHistory();\n  const [receivedTimer, setReceivedTimer] = useState(false);\n  const { id } = useParams();\n\n  useEffect(() => {\n    let isMounted = true;\n    if (socket) {\n      socket.on(\"timerUpdateStart\", (secondData) => {\n        if (isMounted) {\n          const { second, maxSecond } = secondData;\n          setSecond(second);\n          setMaxSecond(maxSecond);\n          if (!receivedTimer) {\n            setReceivedTimer(true);\n          }\n        }\n      });\n      socket.on(\"timerDoneStart\", () => {\n        if (isMounted) {\n          if (!submitted && prompt !== \"\") {\n            socket.emit(\"submitPrompt\", prompt);\n          }\n          history.replace({\n            pathname: \"/DrawingScreen/\" + id,\n            state: { ...state, name },\n          });\n        }\n      });\n    }\n    return () => {\n      isMounted = false;\n      socket.removeAllListeners(\"timerDoneStart\");\n      socket.removeAllListeners(\"timerUpdateStart\");\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [history, socket, submitted, prompt]);\n  return (\n    <Flex p=\"4\" m=\"2\" minH=\"xl\" shadow=\"md\" flexDirection=\"column\">\n      <Heading textAlign=\"center\">Enter a drawing prompt</Heading>\n      <Text textAlign=\"center\" fontSize=\"sm\" mt={2}>\n        Drawing prompts will then be randomly selected to be drawn by the other\n        players\n      </Text>\n      <Center>\n        <CircularProgress value={second} max={maxSecond} mt={4}>\n          {receivedTimer && (\n            <CircularProgressLabel>{second}</CircularProgressLabel>\n          )}\n        </CircularProgress>\n      </Center>\n      {!submitted && (\n        <>\n          <Center mt={8}>\n            <FormControl isRequired w=\"lg\">\n              <FormLabel>Prompt</FormLabel>\n              <Input\n                focusBorderColor=\"purple.600\"\n                placeholder=\"Input a suggestion!\"\n                variant=\"flushed\"\n                onChange={(e) => {\n                  setPrompt(e.target.value);\n                }}\n              />\n            </FormControl>\n          </Center>\n          <Center mt={4}>\n            <Button\n              w=\"lg\"\n              variant=\"outline\"\n              colorScheme=\"purple\"\n              onClick={() => {\n                if (prompt !== \"\") {\n                  setSubmitted(true);\n                  socket.emit(\"submitPrompt\", prompt);\n                }\n              }}\n            >\n              Submit\n            </Button>\n          </Center>\n        </>\n      )}\n      {submitted && (\n        <Center mt=\"auto\">\n          <Alert status=\"success\">\n            <AlertIcon />\n            Thank your for your submission. Waiting for others to submit\n          </Alert>\n        </Center>\n      )}\n    </Flex>\n  );\n};\n\nexport default withRouter(PromptInput);\n","import React, { useContext, useEffect, useRef, useState } from \"react\";\nimport Canvas from \"../Canvas/Canvas\";\nimport { SocketContext } from \"../../Context/socket\";\nimport { useHistory, useParams, withRouter } from \"react-router\";\nimport {\n  Flex,\n  Text,\n  Heading,\n  Button,\n  CircularProgress,\n  CircularProgressLabel,\n  Alert,\n  AlertIcon,\n  Code,\n} from \"@chakra-ui/react\";\n\nconst DrawingScreen = (props) => {\n  const socket = useContext(SocketContext);\n  const canvasRef = useRef();\n  const history = useHistory();\n  const { id } = useParams();\n\n  const [prompt, setPrompt] = useState(\"\");\n  const [second, setSecond] = useState(60);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [receivedTimer, setReceivedTimer] = useState(false);\n  const [maxSecond, setMaxSecond] = useState(60);\n\n  const state = props.location.state;\n  const name = state && state.name;\n\n  useEffect(() => {\n    if (socket) {\n      socket.emit(\"requestingPrompt\");\n      socket.emit(\"startTimer\");\n    }\n  }, [socket]);\n\n  useEffect(() => {\n    let isMounted = true;\n    if (socket && isMounted) {\n      socket.on(\"timerUpdate\", (secondData) => {\n        const { second, maxSecond } = secondData;\n        if (isMounted) {\n          setSecond(second);\n          setMaxSecond(maxSecond);\n        }\n        if (!receivedTimer) {\n          setReceivedTimer(true);\n        }\n      });\n      socket.on(\"timerDone\", () => {\n        if (isMounted) {\n          if (!isSubmitted) {\n            const dataURL = canvasRef.current.toDataURL();\n            const imageData = {\n              name,\n              dataURL,\n            };\n            socket.emit(\"submittingImage\", imageData);\n          }\n\n          history.replace({\n            pathname: \"/Voting/\" + id,\n            state: { ...state, name, prompt },\n          });\n        }\n      });\n    }\n    return () => {\n      isMounted = false;\n      socket.removeAllListeners(\"timerDone\");\n      socket.removeAllListeners(\"timerUpdate\");\n    };\n  }, [socket, isSubmitted, receivedTimer]);\n\n  useEffect(() => {\n    let isMounted = true;\n    if (socket && isMounted) {\n      socket.on(\"sendingPrompt\", (prompt) => {\n        if (isMounted) {\n          setPrompt(prompt);\n        }\n      });\n      socket.on(\"gameOver\", () => {\n        if (isMounted) {\n          history.replace(\"/\");\n        }\n      });\n    }\n    return () => {\n      isMounted = false;\n      socket.removeAllListeners(\"sendingPrompt\");\n      socket.removeAllListeners(\"gameOver\");\n    };\n  }, [history, socket, isSubmitted]);\n  return (\n    <Flex\n      p=\"4\"\n      m=\"2\"\n      minH=\"xl\"\n      shadow=\"md\"\n      flexDirection=\"column\"\n      alignItems=\"center\"\n    >\n      <Heading size=\"md\">The prompt is:</Heading>\n      <Text>\n        <Code>{prompt || \"a turtle wearing a top hat\"}</Code>\n      </Text>\n\n      <CircularProgress value={second} max={maxSecond} mt={4}>\n        {receivedTimer && (\n          <CircularProgressLabel>{second}</CircularProgressLabel>\n        )}\n      </CircularProgress>\n      {!isSubmitted && (\n        <>\n          <Canvas ref={canvasRef} />\n          <Button\n            w=\"2xs\"\n            variant=\"outline\"\n            colorScheme=\"purple\"\n            onClick={() => {\n              setIsSubmitted(true);\n              const dataURL = canvasRef.current.toDataURL();\n              const imageData = {\n                name,\n                dataURL,\n              };\n              socket.emit(\"submittingImage\", imageData);\n            }}\n          >\n            Submit\n          </Button>\n        </>\n      )}\n      {isSubmitted && (\n        <Alert status=\"success\" mt=\"auto\">\n          <AlertIcon />\n          Thank your for your submission. Waiting for others to submit\n        </Alert>\n      )}\n    </Flex>\n  );\n};\n\nexport default withRouter(DrawingScreen);\n","import React, { useContext } from \"react\";\nimport { SocketContext } from \"../../Context/socket\";\nimport { Flex, Box, Image, VStack, Button } from \"@chakra-ui/react\";\n\nconst TileCard = (props) => {\n  const { bgColor } = props;\n  return (\n    <Box borderRadius=\"md\" mb=\"1\" p=\"1\" textAlign=\"center\" bgColor={bgColor}>\n      {props.children}\n    </Box>\n  );\n};\n\nconst VotingButton = (props) => {\n  const { bgColor, onClick } = props;\n  return (\n    <Button\n      w=\"2xs\"\n      bgColor={bgColor}\n      borderRadius=\"md\"\n      padding=\"2\"\n      onClick={onClick}\n    >\n      {props.children}\n    </Button>\n  );\n};\n\nconst VotingCard = ({\n  src,\n  name,\n  showBest,\n  setShowBest,\n  showWeird,\n  setShowWeird,\n  showCreative,\n  setShowCreative,\n  showName,\n  isBest,\n  isCreative,\n  isWeird,\n}) => {\n  const socket = useContext(SocketContext);\n\n  return (\n    <Flex flexDirection=\"column\" w=\"300px\" m={2}>\n      <Flex\n        flexDirection=\"column\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        backgroundColor=\"#f2f2f2\"\n        mb={2}\n      >\n        <Image alt=\"user drawing\" src={src} />\n        <Box margin=\"1\">\n          {isBest && <TileCard bgColor=\"#67e9a3\">🥇 Best Drawing 🥇</TileCard>}\n          {isCreative && (\n            <TileCard bgColor=\"#7CE3F1\">🎨 Most Creative 🎨</TileCard>\n          )}\n          {isWeird && <TileCard bgColor=\"#FD7070\">🤔 ??? 🤔</TileCard>}\n        </Box>\n\n        {showName && (\n          <Box mt=\"auto\" bgColor=\"white\" p=\"2\" mb=\"2\" borderRadius=\"md\">\n            Drawing by {name}\n          </Box>\n        )}\n      </Flex>\n      <VStack spacing={2}>\n        {showBest && (\n          <VotingButton\n            bgColor=\"#67e9a3\"\n            onClick={() => {\n              setShowBest(false);\n              socket.emit(\"voteForPlayer\", { name: name, category: \"best\" });\n            }}\n          >\n            🥇 Best Drawing 🥇\n          </VotingButton>\n        )}\n\n        {showCreative && (\n          <VotingButton\n            bgColor=\"#7CE3F1\"\n            onClick={() => {\n              setShowCreative(false);\n              socket.emit(\"voteForPlayer\", {\n                name: name,\n                category: \"creative\",\n              });\n            }}\n          >\n            🎨 Most Creative 🎨\n          </VotingButton>\n        )}\n\n        {showWeird && (\n          <VotingButton\n            bgColor=\"#FD7070\"\n            onClick={() => {\n              setShowWeird(false);\n              socket.emit(\"voteForPlayer\", { name: name, category: \"weird\" });\n            }}\n          >\n            🤔 ??? 🤔\n          </VotingButton>\n        )}\n      </VStack>\n    </Flex>\n  );\n};\n\nexport default VotingCard;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport VotingCard from \"./VotingCard\";\nimport { SocketContext } from \"../../Context/socket\";\nimport { useHistory, useParams } from \"react-router\";\nimport { withRouter } from \"react-router-dom\";\nimport { Flex, Heading, Text, Code } from \"@chakra-ui/react\";\n\nconst Voting = (props) => {\n  const socket = useContext(SocketContext);\n  const [images, setImages] = useState([]);\n  const history = useHistory();\n  const { id } = useParams();\n\n  const [requestedImages, setRequestedImages] = useState(false);\n  const [showBest, setShowBest] = useState(true);\n  const [showCreative, setShowCreative] = useState(true);\n  const [showWeird, setShowWeird] = useState(true);\n\n  const state = props.location.state;\n  const name = state && state.name;\n  const prompt = state && state.prompt;\n\n  useEffect(() => {\n    let isMounted = true;\n    if (socket && !requestedImages && isMounted) {\n      socket.emit(\"requestingImages\");\n      if (isMounted) {\n        setRequestedImages(true);\n      }\n\n      socket.on(\"sendingImages\", (imgs) => {\n        if (isMounted) {\n          setImages(imgs);\n        }\n      });\n\n      socket.on(\"lastVoteDraw\", () => {\n        if (isMounted) {\n          history.replace({\n            pathname: \"/RoundResults/\" + id,\n            state: { ...state, name, isLast: false, prompt },\n          });\n        }\n      });\n\n      socket.on(\"lastVoteEnd\", () => {\n        if (isMounted) {\n          history.replace({\n            pathname: \"/RoundResults/\" + id,\n            state: { ...state, name, isLast: true, prompt },\n          });\n        }\n      });\n    }\n\n    return () => {\n      isMounted = false;\n      socket.removeAllListeners(\"sendingImages\");\n      socket.removeAllListeners(\"lastVoteDraw\");\n      socket.removeAllListeners(\"lastVoteEnd\");\n    };\n  }, []);\n\n  return (\n    <Flex\n      p=\"4\"\n      m=\"2\"\n      minH=\"xl\"\n      shadow=\"md\"\n      flexDirection=\"column\"\n      alignItems=\"center\"\n    >\n      <Heading>Vote!</Heading>\n      <Text>\n        For the prompt <Code>{prompt}</Code>\n      </Text>\n      <Flex justifyContent=\"center\" flexWrap=\"wrap\" margin=\"1\">\n        {images.map((value, index) => {\n          return (\n            <VotingCard\n              key={index}\n              src={value.dataURL}\n              name={value.name}\n              showBest={showBest}\n              setShowBest={setShowBest}\n              showCreative={showCreative}\n              setShowCreative={setShowCreative}\n              showWeird={showWeird}\n              setShowWeird={setShowWeird}\n              showName={false}\n            />\n          );\n        })}\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default withRouter(Voting);\n","import React from \"react\";\nimport { Flex, Text, List, ListItem } from \"@chakra-ui/react\";\n\nconst Rankings = (props) => {\n  const { title, data, color } = props;\n  return (\n    <Flex\n      minW=\"xs\"\n      flexDirection=\"column\"\n      flex=\"1\"\n      alignItems=\"center\"\n      mt={2}\n      mb={2}\n    >\n      <Text bgColor={color} p=\"2\" borderRadius=\"md\" mb={2} w=\"80%\">\n        {title}\n      </Text>\n      <List>\n        {data.map((value, index) => {\n          return (\n            <ListItem key={index}>\n              {index === 0 && \" 🥇 \"}\n              {value.name}{\" \"}\n              <Text display=\"inline\" color=\"red\">\n                {\" \"}\n                ({value.value} votes)\n              </Text>\n            </ListItem>\n          );\n        })}\n      </List>\n    </Flex>\n  );\n};\n\nexport default Rankings;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { SocketContext } from \"../../Context/socket\";\nimport Rankings from \"./Rankings\";\nimport { Flex, Heading } from \"@chakra-ui/react\";\n\nfunction mySort(a, b) {\n  if (a.value > b.value) {\n    return -1;\n  } else {\n    return 1;\n  }\n}\nconst Results = () => {\n  const [bestArray, setBestArray] = useState([]);\n  const [creativeArray, setCreativeArray] = useState([]);\n  const [weirdArray, setWeirdArray] = useState([]);\n  const [playerData, setPlayerData] = useState([]);\n\n  const socket = useContext(SocketContext);\n\n  useEffect(() => {\n    let isMounted = true;\n\n    if (socket && isMounted) {\n      socket.emit(\"requestingVotes\");\n\n      socket.on(\"sendingVotes\", (votes) => {\n        if (isMounted) {\n          setPlayerData(votes);\n        }\n      });\n    }\n\n    return () => {\n      isMounted = false;\n    };\n  }, [socket]);\n\n  useEffect(() => {\n    const arr1 = playerData.map((data) => {\n      return {\n        name: data.name,\n        value: data.votes.best,\n      };\n    });\n\n    const arr2 = playerData.map((data) => {\n      return {\n        name: data.name,\n        value: data.votes.creative,\n      };\n    });\n\n    const arr3 = playerData.map((data) => {\n      return {\n        name: data.name,\n        value: data.votes.weird,\n      };\n    });\n    arr1.sort(mySort);\n    setBestArray(arr1);\n\n    arr2.sort(mySort);\n    setCreativeArray(arr2);\n\n    arr3.sort(mySort);\n    setWeirdArray(arr3);\n  }, [playerData]);\n  return (\n    <Flex\n      p=\"4\"\n      m=\"2\"\n      minH=\"lg\"\n      shadow=\"lg\"\n      textAlign=\"center\"\n      flexDirection=\"column\"\n    >\n      <Heading mb={2}>Final Results!</Heading>\n\n      <Flex textAlign=\"center\" flexWrap=\"wrap\">\n        <Rankings title=\"Best Drawing\" color=\"#67e9a3\" data={bestArray} />\n        <Rankings title=\"Most Creative\" color=\"#7CE3F1\" data={creativeArray} />\n        <Rankings title=\"???? Drawing\" color=\"#FD7070\" data={weirdArray} />\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default Results;\n","import React, { useEffect, useState, useContext } from \"react\";\nimport VotingCard from \"../Voting/VotingCard\";\nimport { SocketContext } from \"../../Context/socket\";\nimport { useHistory, useParams, withRouter } from \"react-router-dom\";\nimport { Flex, Heading, Button, Text, Code } from \"@chakra-ui/react\";\n\nfunction mySort(a, b) {\n  if (a.value > b.value) {\n    return -1;\n  } else {\n    return 1;\n  }\n}\n\nfunction setTopPlayers(sortedPlayers, category) {\n  const topCount = sortedPlayers[0].value;\n\n  for (let i = 0; i < sortedPlayers.length; i++) {\n    if (sortedPlayers[i].value === topCount) {\n      sortedPlayers[i][category] = true;\n    } else {\n      sortedPlayers[i][category] = false;\n    }\n  }\n}\n\nfunction mergeArrs(arr1, arr2, arr3) {\n  const newArr = [];\n  for (let i = 0; i < arr1.length; i++) {\n    const name = arr1[i].name;\n    newArr[i] = {\n      name,\n      isBest: arr1[i].isBest,\n      img: arr1[i].img,\n    };\n\n    for (let j = 0; j < arr2.length; j++) {\n      if (arr2[j].name === name) {\n        newArr[i].isCreative = arr2[j].isCreative;\n        break;\n      }\n    }\n\n    for (let j = 0; j < arr3.length; j++) {\n      if (arr3[j].name === name) {\n        newArr[i].isWeird = arr3[j].isWeird;\n        break;\n      }\n    }\n  }\n  return newArr;\n}\n\nconst RoundResults = (props) => {\n  const [players, setPlayers] = useState([]);\n  const [serverPlayers, setServerPlayers] = useState([]);\n  const [buttonText, setButtonText] = useState(\"Next Round\");\n\n  const history = useHistory();\n  const { id } = useParams();\n\n  const socket = useContext(SocketContext);\n  const state = props.location.state;\n  const { isHost } = state;\n  const { name, isLast, prompt } = state;\n\n  useEffect(() => {\n    if (isLast) {\n      setButtonText(\"Go To Final Results\");\n    }\n  }, [isLast]);\n\n  useEffect(() => {\n    let isMounted = true;\n\n    if (socket && isMounted) {\n      socket.emit(\"requestingVotes\");\n\n      socket.on(\"sendingVotes\", (votes) => {\n        if (isMounted) {\n          setServerPlayers(votes);\n        }\n      });\n\n      socket.on(\"hostStartedNextRound\", () => {\n        history.replace({\n          pathname: \"/DrawingScreen/\" + id,\n          state: { ...state, name },\n        });\n      });\n\n      socket.on(\"hostEndedGame\", () => {\n        history.replace({\n          pathname: \"/Results/\" + id,\n          state: { ...state, name },\n        });\n      });\n    }\n\n    return () => {\n      isMounted = false;\n    };\n  }, [socket]);\n\n  useEffect(() => {\n    if (serverPlayers.length === 0) {\n      return;\n    }\n    const arr1 = serverPlayers.map((data) => {\n      return {\n        name: data.name,\n        value: data.roundVotes.best,\n        img: data.currentDrawing,\n      };\n    });\n\n    const arr2 = serverPlayers.map((data) => {\n      return {\n        name: data.name,\n        value: data.roundVotes.creative,\n      };\n    });\n\n    const arr3 = serverPlayers.map((data) => {\n      return {\n        name: data.name,\n        value: data.roundVotes.weird,\n      };\n    });\n    arr1.sort(mySort);\n\n    arr2.sort(mySort);\n\n    arr3.sort(mySort);\n    setTopPlayers(arr1, \"isBest\");\n    setTopPlayers(arr2, \"isCreative\");\n    setTopPlayers(arr3, \"isWeird\");\n    const newArr = mergeArrs(arr1, arr2, arr3);\n    setPlayers(newArr);\n  }, [serverPlayers]);\n\n  return (\n    <Flex\n      p=\"4\"\n      m=\"2\"\n      minH=\"xl\"\n      shadow=\"md\"\n      flexDirection=\"column\"\n      alignItems=\"center\"\n    >\n      <Heading>Round Results</Heading>\n      <Text mb={2}>\n        For the prompt <Code>{prompt}</Code>\n      </Text>\n      {isHost && (\n        <Button\n          variant=\"outline\"\n          colorScheme=\"purple\"\n          onClick={() => {\n            if (isLast) {\n              socket.emit(\"hostEndingGame\");\n            } else {\n              socket.emit(\"hostStartingNextRound\");\n            }\n          }}\n        >\n          {buttonText}\n        </Button>\n      )}\n      <Flex justifyContent=\"center\" flexWrap=\"wrap\" m={2}>\n        {players.map((player, index) => {\n          return (\n            <VotingCard\n              key={index}\n              src={player.img}\n              name={player.name}\n              setShowBest={() => {}}\n              showBest={false}\n              setShowCreative={() => {}}\n              showCreative={false}\n              setShowWeird={() => {}}\n              showWeird={false}\n              showName={true}\n              isBest={player.isBest}\n              isCreative={player.isCreative}\n              isWeird={player.isWeird}\n            />\n          );\n        })}\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default withRouter(RoundResults);\n","import { extendTheme } from \"@chakra-ui/react\";\n\nconst config = {\n  initialColorMode: \"light\",\n  useSystemColorMode: false,\n};\n\nconst theme = extendTheme({ config });\n\nexport default theme;\n","import React from \"react\";\nimport Home from \"./Components/Home/Home\";\nimport Lobby from \"./Components/Lobby/Lobby\";\nimport PromptInput from \"./Components/PromptInput/PromptInput\";\nimport DrawingScreen from \"./Components/DrawingScreen/DrawingScreen\";\nimport Voting from \"./Components/Voting/Voting\";\nimport Results from \"./Components/Results/Results\";\nimport RoundResults from \"./Components/RoundResults/RoundResults\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { SocketContext, socket } from \"./Context/socket\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport theme from \"./theme\";\n\nfunction App() {\n  return (\n    <ChakraProvider theme={theme}>\n      <SocketContext.Provider value={socket}>\n        <Router>\n          <Switch>\n            <Route path=\"/RoundResults/:id\">\n              <RoundResults />\n            </Route>\n            <Route path=\"/Results/:id\">\n              <Results />\n            </Route>\n            <Route path=\"/Voting/:id\">\n              <Voting />\n            </Route>\n            <Route path=\"/Prompt/:id\">\n              <PromptInput />\n            </Route>\n            <Route path=\"/Lobby/:id\">\n              <Lobby />\n            </Route>\n            <Route path=\"/DrawingScreen/:id\">\n              <DrawingScreen />\n            </Route>\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        </Router>\n      </SocketContext.Provider>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}